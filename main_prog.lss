
main_prog.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000b04  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000003e  00800060  00000b04  00000b98  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000015  0080009e  0080009e  00000bd6  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  00000bd6  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000258  00000000  00000000  00000bf6  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000094f  00000000  00000000  00000e4e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000001e3  00000000  00000000  0000179d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000c35  00000000  00000000  00001980  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000120  00000000  00000000  000025b8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000028e  00000000  00000000  000026d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000156  00000000  00000000  00002966  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   8:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  10:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  14:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  18:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  1c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  20:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  24:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  28:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  2c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  30:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  34:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  38:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  3c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  40:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  44:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  48:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  4c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  50:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  54:	6b 03       	fmul	r22, r19
  56:	6e 03       	fmul	r22, r22
  58:	71 03       	mulsu	r23, r17
  5a:	4f 03       	fmul	r20, r23
  5c:	52 03       	mulsu	r21, r18
  5e:	6b 03       	fmul	r22, r19
  60:	6e 03       	fmul	r22, r22
  62:	71 03       	mulsu	r23, r17
  64:	55 03       	mulsu	r21, r21
  66:	58 03       	fmul	r21, r16
  68:	5b 03       	fmul	r21, r19
  6a:	5e 03       	fmul	r21, r22
  6c:	62 03       	mulsu	r22, r18
  6e:	65 03       	mulsu	r22, r21
  70:	68 03       	fmul	r22, r16
  72:	6b 03       	fmul	r22, r19
  74:	6e 03       	fmul	r22, r22
  76:	71 03       	mulsu	r23, r17
  78:	74 03       	mulsu	r23, r20
  7a:	77 03       	mulsu	r23, r23

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf e5       	ldi	r28, 0x5F	; 95
  82:	d4 e0       	ldi	r29, 0x04	; 4
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_copy_data>:
  88:	10 e0       	ldi	r17, 0x00	; 0
  8a:	a0 e6       	ldi	r26, 0x60	; 96
  8c:	b0 e0       	ldi	r27, 0x00	; 0
  8e:	e4 e0       	ldi	r30, 0x04	; 4
  90:	fb e0       	ldi	r31, 0x0B	; 11
  92:	02 c0       	rjmp	.+4      	; 0x98 <.do_copy_data_start>

00000094 <.do_copy_data_loop>:
  94:	05 90       	lpm	r0, Z+
  96:	0d 92       	st	X+, r0

00000098 <.do_copy_data_start>:
  98:	ae 39       	cpi	r26, 0x9E	; 158
  9a:	b1 07       	cpc	r27, r17
  9c:	d9 f7       	brne	.-10     	; 0x94 <.do_copy_data_loop>

0000009e <__do_clear_bss>:
  9e:	10 e0       	ldi	r17, 0x00	; 0
  a0:	ae e9       	ldi	r26, 0x9E	; 158
  a2:	b0 e0       	ldi	r27, 0x00	; 0
  a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
  a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
  a8:	a3 3b       	cpi	r26, 0xB3	; 179
  aa:	b1 07       	cpc	r27, r17
  ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
  ae:	0e 94 85 01 	call	0x30a	; 0x30a <main>
  b2:	0c 94 80 05 	jmp	0xb00	; 0xb00 <_exit>

000000b6 <__bad_interrupt>:
  b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ba <lcd_clear>:
#define Select_DataRegister	   	    CONTROL_PORT|=_BV(RS)
#define Data_Lcd(a)			        DATA_PORT=a

void lcd_clear(void)
{
	Select_InstructionRegister;
  ba:	dd 98       	cbi	0x1b, 5	; 27
	Data_Lcd(0x01);
  bc:	81 e0       	ldi	r24, 0x01	; 1
  be:	85 bb       	out	0x15, r24	; 21
	Set_Enable;
  c0:	df 9a       	sbi	0x1b, 7	; 27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
  c2:	8a 95       	dec	r24
  c4:	f1 f7       	brne	.-4      	; 0xc2 <lcd_clear+0x8>
	_delay_us(2);
	Clear_Enable;
  c6:	df 98       	cbi	0x1b, 7	; 27
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  c8:	84 ef       	ldi	r24, 0xF4	; 244
  ca:	91 e0       	ldi	r25, 0x01	; 1
  cc:	01 97       	sbiw	r24, 0x01	; 1
  ce:	f1 f7       	brne	.-4      	; 0xcc <lcd_clear+0x12>
	_delay_ms(2);
}
  d0:	08 95       	ret

000000d2 <lcd_home>:

void lcd_home(void)
{
	Select_InstructionRegister;
  d2:	dd 98       	cbi	0x1b, 5	; 27
	Data_Lcd(0x02);
  d4:	82 e0       	ldi	r24, 0x02	; 2
  d6:	85 bb       	out	0x15, r24	; 21
	Set_Enable;
  d8:	df 9a       	sbi	0x1b, 7	; 27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
  da:	81 e0       	ldi	r24, 0x01	; 1
  dc:	8a 95       	dec	r24
  de:	f1 f7       	brne	.-4      	; 0xdc <lcd_home+0xa>
	_delay_us(2);
	Clear_Enable;
  e0:	df 98       	cbi	0x1b, 7	; 27
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  e2:	84 ef       	ldi	r24, 0xF4	; 244
  e4:	91 e0       	ldi	r25, 0x01	; 1
  e6:	01 97       	sbiw	r24, 0x01	; 1
  e8:	f1 f7       	brne	.-4      	; 0xe6 <lcd_home+0x14>
	_delay_ms(2);
}
  ea:	08 95       	ret

000000ec <lcd_command>:

void lcd_command(unsigned char command)
{
	Select_InstructionRegister;
  ec:	dd 98       	cbi	0x1b, 5	; 27
	Data_Lcd(command);
  ee:	85 bb       	out	0x15, r24	; 21
	Set_Enable;
  f0:	df 9a       	sbi	0x1b, 7	; 27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
  f2:	81 e0       	ldi	r24, 0x01	; 1
  f4:	8a 95       	dec	r24
  f6:	f1 f7       	brne	.-4      	; 0xf4 <lcd_command+0x8>
	_delay_us(1);
	Clear_Enable;
  f8:	df 98       	cbi	0x1b, 7	; 27
  fa:	8d e0       	ldi	r24, 0x0D	; 13
  fc:	8a 95       	dec	r24
  fe:	f1 f7       	brne	.-4      	; 0xfc <lcd_command+0x10>
	_delay_us(fastdelay);
}
 100:	08 95       	ret

00000102 <lcd_init>:

void lcd_init(void)
{
 102:	df 93       	push	r29
 104:	cf 93       	push	r28
 106:	00 d0       	rcall	.+0      	; 0x108 <lcd_init+0x6>
 108:	0f 92       	push	r0
 10a:	cd b7       	in	r28, 0x3d	; 61
 10c:	de b7       	in	r29, 0x3e	; 62
   DATA_DDR=0XFF; //Setting data port for output
 10e:	8f ef       	ldi	r24, 0xFF	; 255
 110:	84 bb       	out	0x14, r24	; 20
   CONTROL_DDR |= _BV(E)| _BV(RS);//setting selected pins of control port for output
 112:	8a b3       	in	r24, 0x1a	; 26
 114:	80 6a       	ori	r24, 0xA0	; 160
 116:	8a bb       	out	0x1a, r24	; 26
   CONTROL_PORT&= ~(_BV(E)|_BV(RS)); //setting values to 0 at starting
 118:	8b b3       	in	r24, 0x1b	; 27
 11a:	8f 75       	andi	r24, 0x5F	; 95
 11c:	8b bb       	out	0x1b, r24	; 27
   CONTROL_DDR |= _BV(RW); //
 11e:	d6 9a       	sbi	0x1a, 6	; 26
   CONTROL_PORT |= ~(_BV(RW)); //
 120:	8b b3       	in	r24, 0x1b	; 27
 122:	8f 6b       	ori	r24, 0xBF	; 191
 124:	8b bb       	out	0x1b, r24	; 27
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 126:	86 ea       	ldi	r24, 0xA6	; 166
 128:	9e e0       	ldi	r25, 0x0E	; 14
 12a:	fc 01       	movw	r30, r24
 12c:	31 97       	sbiw	r30, 0x01	; 1
 12e:	f1 f7       	brne	.-4      	; 0x12c <lcd_init+0x2a>

   _delay_ms(15);
   _delay_ms(15);
   char init[3];
   unsigned char i;
   init[0] = 0x38;// 8bitdata and 5x8 dot display
 130:	01 97       	sbiw	r24, 0x01	; 1
 132:	f1 f7       	brne	.-4      	; 0x130 <lcd_init+0x2e>
 134:	88 e3       	ldi	r24, 0x38	; 56
 136:	89 83       	std	Y+1, r24	; 0x01
   init[1] = 0x0c;// enable display 
 138:	8c e0       	ldi	r24, 0x0C	; 12
 13a:	8a 83       	std	Y+2, r24	; 0x02
   init[2] = 0x06;// move cursor right after writing a character 
 13c:	86 e0       	ldi	r24, 0x06	; 6
 13e:	8b 83       	std	Y+3, r24	; 0x03
   for(i=0;i<3;i++) lcd_command(init[i]);
 140:	88 e3       	ldi	r24, 0x38	; 56
 142:	0e 94 76 00 	call	0xec	; 0xec <lcd_command>
 146:	8a 81       	ldd	r24, Y+2	; 0x02
 148:	0e 94 76 00 	call	0xec	; 0xec <lcd_command>
 14c:	86 e0       	ldi	r24, 0x06	; 6
 14e:	0e 94 76 00 	call	0xec	; 0xec <lcd_command>
   lcd_clear();	
 152:	0e 94 5d 00 	call	0xba	; 0xba <lcd_clear>
}
 156:	0f 90       	pop	r0
 158:	0f 90       	pop	r0
 15a:	0f 90       	pop	r0
 15c:	cf 91       	pop	r28
 15e:	df 91       	pop	r29
 160:	08 95       	ret

00000162 <display_char>:

void display_char(unsigned char data)
{
	Select_DataRegister;
 162:	dd 9a       	sbi	0x1b, 5	; 27
	Data_Lcd(data);
 164:	85 bb       	out	0x15, r24	; 21
	Set_Enable;
 166:	df 9a       	sbi	0x1b, 7	; 27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 168:	81 e0       	ldi	r24, 0x01	; 1
 16a:	8a 95       	dec	r24
 16c:	f1 f7       	brne	.-4      	; 0x16a <display_char+0x8>
	_delay_us(1);
	Clear_Enable;
 16e:	df 98       	cbi	0x1b, 7	; 27
 170:	8d e0       	ldi	r24, 0x0D	; 13
 172:	8a 95       	dec	r24
 174:	f1 f7       	brne	.-4      	; 0x172 <display_char+0x10>
	_delay_us(fastdelay);
}
 176:	08 95       	ret

00000178 <display_byte>:

void display_byte(unsigned char num)
{   unsigned char i = 0;
 178:	1f 93       	push	r17
 17a:	28 2f       	mov	r18, r24
 17c:	64 e6       	ldi	r22, 0x64	; 100
 17e:	0e 94 4d 05 	call	0xa9a	; 0xa9a <__udivmodqi4>
 182:	19 2f       	mov	r17, r25
    while(num>=100) 
	{
		i++;
		num = num -100;
	}
	display_char(i+48);
 184:	82 2f       	mov	r24, r18
 186:	0e 94 4d 05 	call	0xa9a	; 0xa9a <__udivmodqi4>
 18a:	80 5d       	subi	r24, 0xD0	; 208
 18c:	0e 94 b1 00 	call	0x162	; 0x162 <display_char>
	while(num>=10)
	{
		i++;
		num = num -10;
	}
	display_char(i+48);
 190:	81 2f       	mov	r24, r17
 192:	6a e0       	ldi	r22, 0x0A	; 10
 194:	0e 94 4d 05 	call	0xa9a	; 0xa9a <__udivmodqi4>
 198:	80 5d       	subi	r24, 0xD0	; 208
 19a:	0e 94 b1 00 	call	0x162	; 0x162 <display_char>
	display_char(num + 48);
 19e:	81 2f       	mov	r24, r17
 1a0:	6a e0       	ldi	r22, 0x0A	; 10
 1a2:	0e 94 4d 05 	call	0xa9a	; 0xa9a <__udivmodqi4>
 1a6:	89 2f       	mov	r24, r25
 1a8:	80 5d       	subi	r24, 0xD0	; 208
 1aa:	0e 94 b1 00 	call	0x162	; 0x162 <display_char>
}
 1ae:	1f 91       	pop	r17
 1b0:	08 95       	ret

000001b2 <display_int>:

void display_int(unsigned int num)
{
 1b2:	ef 92       	push	r14
 1b4:	ff 92       	push	r15
 1b6:	0f 93       	push	r16
 1b8:	1f 93       	push	r17
 1ba:	9c 01       	movw	r18, r24
 1bc:	60 e1       	ldi	r22, 0x10	; 16
 1be:	77 e2       	ldi	r23, 0x27	; 39
 1c0:	0e 94 59 05 	call	0xab2	; 0xab2 <__udivmodhi4>
 1c4:	18 2f       	mov	r17, r24
 1c6:	09 2f       	mov	r16, r25
   unsigned char i=0;
   while(num>=10000) {num = num - 10000; i++;}
   display_char(i+48);
 1c8:	c9 01       	movw	r24, r18
 1ca:	60 e1       	ldi	r22, 0x10	; 16
 1cc:	77 e2       	ldi	r23, 0x27	; 39
 1ce:	0e 94 59 05 	call	0xab2	; 0xab2 <__udivmodhi4>
 1d2:	86 2f       	mov	r24, r22
 1d4:	80 5d       	subi	r24, 0xD0	; 208
 1d6:	0e 94 b1 00 	call	0x162	; 0x162 <display_char>
 1da:	81 2f       	mov	r24, r17
 1dc:	90 2f       	mov	r25, r16
 1de:	68 ee       	ldi	r22, 0xE8	; 232
 1e0:	73 e0       	ldi	r23, 0x03	; 3
 1e2:	0e 94 59 05 	call	0xab2	; 0xab2 <__udivmodhi4>
 1e6:	f8 2e       	mov	r15, r24
 1e8:	e9 2e       	mov	r14, r25
   i=0;
   while(num>=1000)  {num = num - 1000; i++;}
   display_char(i+48);
 1ea:	81 2f       	mov	r24, r17
 1ec:	90 2f       	mov	r25, r16
 1ee:	68 ee       	ldi	r22, 0xE8	; 232
 1f0:	73 e0       	ldi	r23, 0x03	; 3
 1f2:	0e 94 59 05 	call	0xab2	; 0xab2 <__udivmodhi4>
 1f6:	86 2f       	mov	r24, r22
 1f8:	80 5d       	subi	r24, 0xD0	; 208
 1fa:	0e 94 b1 00 	call	0x162	; 0x162 <display_char>
 1fe:	8f 2d       	mov	r24, r15
 200:	9e 2d       	mov	r25, r14
 202:	64 e6       	ldi	r22, 0x64	; 100
 204:	70 e0       	ldi	r23, 0x00	; 0
 206:	0e 94 59 05 	call	0xab2	; 0xab2 <__udivmodhi4>
 20a:	18 2f       	mov	r17, r24
 20c:	09 2f       	mov	r16, r25
   i=0;
   while(num>=100)   {num = num - 100; i++;}
   display_char(i+48);
 20e:	8f 2d       	mov	r24, r15
 210:	9e 2d       	mov	r25, r14
 212:	64 e6       	ldi	r22, 0x64	; 100
 214:	70 e0       	ldi	r23, 0x00	; 0
 216:	0e 94 59 05 	call	0xab2	; 0xab2 <__udivmodhi4>
 21a:	86 2f       	mov	r24, r22
 21c:	80 5d       	subi	r24, 0xD0	; 208
 21e:	0e 94 b1 00 	call	0x162	; 0x162 <display_char>
   i=0;
   while(num>=10)    {num = num - 10; i++;}
   display_char(i+48);
 222:	81 2f       	mov	r24, r17
 224:	90 2f       	mov	r25, r16
 226:	6a e0       	ldi	r22, 0x0A	; 10
 228:	70 e0       	ldi	r23, 0x00	; 0
 22a:	0e 94 59 05 	call	0xab2	; 0xab2 <__udivmodhi4>
 22e:	86 2f       	mov	r24, r22
 230:	80 5d       	subi	r24, 0xD0	; 208
 232:	0e 94 b1 00 	call	0x162	; 0x162 <display_char>
   i = (unsigned char)num;
   display_char(i+48);
 236:	81 2f       	mov	r24, r17
 238:	90 2f       	mov	r25, r16
 23a:	6a e0       	ldi	r22, 0x0A	; 10
 23c:	70 e0       	ldi	r23, 0x00	; 0
 23e:	0e 94 59 05 	call	0xab2	; 0xab2 <__udivmodhi4>
 242:	80 5d       	subi	r24, 0xD0	; 208
 244:	0e 94 b1 00 	call	0x162	; 0x162 <display_char>
}
 248:	1f 91       	pop	r17
 24a:	0f 91       	pop	r16
 24c:	ff 90       	pop	r15
 24e:	ef 90       	pop	r14
 250:	08 95       	ret

00000252 <move_to>:

void move_to(unsigned char x,unsigned char y)
{
    unsigned char t;
	t = 128 + (y<<6) + x;
    lcd_command(t);
 252:	80 58       	subi	r24, 0x80	; 128
 254:	62 95       	swap	r22
 256:	66 0f       	add	r22, r22
 258:	66 0f       	add	r22, r22
 25a:	60 7c       	andi	r22, 0xC0	; 192
 25c:	86 0f       	add	r24, r22
 25e:	0e 94 76 00 	call	0xec	; 0xec <lcd_command>
}
 262:	08 95       	ret

00000264 <adc_init>:
#include <avr/io.h>
#include "adc_routines.h"

void adc_init(void)
{
	DDRA &= ~_BV(AC_CHAN);								// Set necessary ADC pins as input		
 264:	d1 98       	cbi	0x1a, 1	; 26
	PORTA &= ~_BV(AC_CHAN);							// Disable corresponding pull-ups
 266:	d9 98       	cbi	0x1b, 1	; 27
	ADMUX = _BV(REFS0) | _BV(ADLAR);				 	// Set AVCC as reference, results left adjusted
 268:	80 e6       	ldi	r24, 0x60	; 96
 26a:	87 b9       	out	0x07, r24	; 7
	ADCSRA = _BV(ADEN) | _BV(ADPS2)| _BV(ADPS1);   	// Enabling ADC, clearing flag, interrupt enable and auto-trigger, 1/2 div. factor
 26c:	86 e8       	ldi	r24, 0x86	; 134
 26e:	86 b9       	out	0x06, r24	; 6
	ADMUX = (ADMUX & 0xe0) + AC_CHAN;					// Set to dummy read AC_SIG for initiation of analog circuit
 270:	87 b1       	in	r24, 0x07	; 7
 272:	80 7e       	andi	r24, 0xE0	; 224
 274:	8f 5f       	subi	r24, 0xFF	; 255
 276:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= _BV(ADSC); 								// Start dummy AC_CHAN conversion to initialize analog circuits
 278:	36 9a       	sbi	0x06, 6	; 6
	while((ADCSRA & _BV(ADSC)) != 0) {};
 27a:	36 99       	sbic	0x06, 6	; 6
 27c:	fe cf       	rjmp	.-4      	; 0x27a <adc_init+0x16>
}
 27e:	08 95       	ret

00000280 <adc_read_dc>:
unsigned char adc_read_dc (void)
{
	DDRA &= ~_BV(DC_CHAN);			
 280:	d0 98       	cbi	0x1a, 0	; 26
	PORTA &= ~_BV(DC_CHAN);
 282:	d8 98       	cbi	0x1b, 0	; 27
	ADMUX = (ADMUX & 0xe0) + DC_CHAN;
 284:	87 b1       	in	r24, 0x07	; 7
 286:	80 7e       	andi	r24, 0xE0	; 224
 288:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= _BV(ADSC); 		
 28a:	36 9a       	sbi	0x06, 6	; 6
	while((ADCSRA & _BV(ADSC)) != 0) {};						
 28c:	36 99       	sbic	0x06, 6	; 6
 28e:	fe cf       	rjmp	.-4      	; 0x28c <adc_read_dc+0xc>
	return (ADCH);
 290:	85 b1       	in	r24, 0x05	; 5
}
 292:	08 95       	ret

00000294 <adc_read_ac>:
unsigned char adc_read_ac (void)
{
	DDRA &= ~_BV(AC_CHAN);						
 294:	d1 98       	cbi	0x1a, 1	; 26
	PORTA &= ~_BV(AC_CHAN);	
 296:	d9 98       	cbi	0x1b, 1	; 27
	ADMUX = (ADMUX & 0xe0) + AC_CHAN;
 298:	87 b1       	in	r24, 0x07	; 7
 29a:	80 7e       	andi	r24, 0xE0	; 224
 29c:	8f 5f       	subi	r24, 0xFF	; 255
 29e:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= _BV(ADSC); 		
 2a0:	36 9a       	sbi	0x06, 6	; 6
	while((ADCSRA & _BV(ADSC)) != 0) {};		
 2a2:	36 99       	sbic	0x06, 6	; 6
 2a4:	fe cf       	rjmp	.-4      	; 0x2a2 <adc_read_ac+0xe>
	return (ADCH);
 2a6:	85 b1       	in	r24, 0x05	; 5
 2a8:	08 95       	ret

000002aa <Initializing_Port_Timer>:
#include <avr/io.h>
#include <util/delay.h>

void Initializing_Port_Timer(void)
{
	DDRB |= _BV(PB2) | _BV(PB3);
 2aa:	87 b3       	in	r24, 0x17	; 23
 2ac:	8c 60       	ori	r24, 0x0C	; 12
 2ae:	87 bb       	out	0x17, r24	; 23
	TCCR0 = _BV(WGM00) | _BV(WGM01);	//Fast PWM
 2b0:	88 e4       	ldi	r24, 0x48	; 72
 2b2:	83 bf       	out	0x33, r24	; 51
	TCNT0 = 0;
 2b4:	12 be       	out	0x32, r1	; 50
	OCR0 = 0;
 2b6:	1c be       	out	0x3c, r1	; 60
}
 2b8:	08 95       	ret

000002ba <inflate_cuff>:
#include <avr/io.h>
#include <util/delay.h>

void Initializing_Port_Timer(void)
{
	DDRB |= _BV(PB2) | _BV(PB3);
 2ba:	87 b3       	in	r24, 0x17	; 23
 2bc:	8c 60       	ori	r24, 0x0C	; 12
 2be:	87 bb       	out	0x17, r24	; 23
	TCCR0 = _BV(WGM00) | _BV(WGM01);	//Fast PWM
 2c0:	88 e4       	ldi	r24, 0x48	; 72
 2c2:	83 bf       	out	0x33, r24	; 51
	TCNT0 = 0;
 2c4:	12 be       	out	0x32, r1	; 50
	OCR0 = 0;
 2c6:	1c be       	out	0x3c, r1	; 60
}

void inflate_cuff (void)
{
	Initializing_Port_Timer();
	PORTB |= _BV(PB2) | _BV(PB3); 
 2c8:	88 b3       	in	r24, 0x18	; 24
 2ca:	8c 60       	ori	r24, 0x0C	; 12
 2cc:	88 bb       	out	0x18, r24	; 24
}
 2ce:	08 95       	ret

000002d0 <deflate_fast>:
#include <avr/io.h>
#include <util/delay.h>

void Initializing_Port_Timer(void)
{
	DDRB |= _BV(PB2) | _BV(PB3);
 2d0:	87 b3       	in	r24, 0x17	; 23
 2d2:	8c 60       	ori	r24, 0x0C	; 12
 2d4:	87 bb       	out	0x17, r24	; 23
	TCCR0 = _BV(WGM00) | _BV(WGM01);	//Fast PWM
 2d6:	88 e4       	ldi	r24, 0x48	; 72
 2d8:	83 bf       	out	0x33, r24	; 51
	TCNT0 = 0;
 2da:	12 be       	out	0x32, r1	; 50
	OCR0 = 0;
 2dc:	1c be       	out	0x3c, r1	; 60
}

void deflate_fast (void)
{
	Initializing_Port_Timer();
	PORTB &= (~(_BV(PB2) | _BV(PB3)));
 2de:	88 b3       	in	r24, 0x18	; 24
 2e0:	83 7f       	andi	r24, 0xF3	; 243
 2e2:	88 bb       	out	0x18, r24	; 24
}
 2e4:	08 95       	ret

000002e6 <deflate_slow>:
#include <avr/io.h>
#include <util/delay.h>

void Initializing_Port_Timer(void)
{
	DDRB |= _BV(PB2) | _BV(PB3);
 2e6:	87 b3       	in	r24, 0x17	; 23
 2e8:	8c 60       	ori	r24, 0x0C	; 12
 2ea:	87 bb       	out	0x17, r24	; 23
	TCCR0 = _BV(WGM00) | _BV(WGM01);	//Fast PWM
 2ec:	88 e4       	ldi	r24, 0x48	; 72
 2ee:	83 bf       	out	0x33, r24	; 51
	TCNT0 = 0;
 2f0:	12 be       	out	0x32, r1	; 50
	OCR0 = 0;
 2f2:	1c be       	out	0x3c, r1	; 60
}

void deflate_slow (void)
{
	Initializing_Port_Timer();
	PORTB &= (~(_BV(PB2)));
 2f4:	c2 98       	cbi	0x18, 2	; 24
	OCR0 = 170;
 2f6:	8a ea       	ldi	r24, 0xAA	; 170
 2f8:	8c bf       	out	0x3c, r24	; 60
	TCCR0 |= _BV(CS00) | _BV(COM01);	//No prescaling, Non-inverting
 2fa:	83 b7       	in	r24, 0x33	; 51
 2fc:	81 62       	ori	r24, 0x21	; 33
 2fe:	83 bf       	out	0x33, r24	; 51
}
 300:	08 95       	ret

00000302 <buttons_init>:
#define ButtonsPort PORTA
#define ButtonsDDR	DDRA

void buttons_init (void)
{
	ButtonsDDR |= _BV(STARTPin) | _BV(STOPPin) | _BV(RESETPin);
 302:	8a b3       	in	r24, 0x1a	; 26
 304:	8c 61       	ori	r24, 0x1C	; 28
 306:	8a bb       	out	0x1a, r24	; 26
	//ButtonsPort |= _BV(STARTPin) | _BV(STOPPin) | _BV(RESETPin);
}
 308:	08 95       	ret

0000030a <main>:
unsigned char DeflateSlowMsg []	= {"Deflating "};
unsigned char DeflateFastMsg []	= {"Deflating!"};
unsigned char FinalMsg []		= {"Sys/MAP/Dia/BPM"};

int main (void)
{
 30a:	2f 92       	push	r2
 30c:	3f 92       	push	r3
 30e:	4f 92       	push	r4
 310:	5f 92       	push	r5
 312:	6f 92       	push	r6
 314:	7f 92       	push	r7
 316:	8f 92       	push	r8
 318:	9f 92       	push	r9
 31a:	af 92       	push	r10
 31c:	bf 92       	push	r11
 31e:	cf 92       	push	r12
 320:	df 92       	push	r13
 322:	ef 92       	push	r14
 324:	ff 92       	push	r15
 326:	0f 93       	push	r16
 328:	1f 93       	push	r17
 32a:	cf 93       	push	r28
 32c:	df 93       	push	r29
#define ButtonsPort PORTA
#define ButtonsDDR	DDRA

void buttons_init (void)
{
	ButtonsDDR |= _BV(STARTPin) | _BV(STOPPin) | _BV(RESETPin);
 32e:	8a b3       	in	r24, 0x1a	; 26
 330:	8c 61       	ori	r24, 0x1C	; 28
 332:	8a bb       	out	0x1a, r24	; 26
{

	//Initialize the machine
	unsigned char temp = 0;
	buttons_init();
	lcd_init();
 334:	0e 94 81 00 	call	0x102	; 0x102 <lcd_init>
	adc_init();
 338:	0e 94 32 01 	call	0x264	; 0x264 <adc_init>
 33c:	c1 e6       	ldi	r28, 0x61	; 97
 33e:	d0 e0       	ldi	r29, 0x00	; 0
	for(unsigned char i = 0;i<sizeof(StartMsg)-1;i++) display_char(StartMsg[i]); 
 340:	89 91       	ld	r24, Y+
 342:	0e 94 b1 00 	call	0x162	; 0x162 <display_char>
 346:	80 e0       	ldi	r24, 0x00	; 0
 348:	cc 36       	cpi	r28, 0x6C	; 108
 34a:	d8 07       	cpc	r29, r24
 34c:	c9 f7       	brne	.-14     	; 0x340 <main+0x36>
		case MachineDeflating1 :
			Test 	= IsSTOPpressed;
			break;
		
		case MachineDeflating2 :
			Test	= IsAllData;
 34e:	04 e0       	ldi	r16, 0x04	; 4
 350:	d0 2e       	mov	r13, r16
		case  MachineInflating2:	
			Test 	= IsMaxPrReached;
			break;
		
		case MachineDeflating1 :
			Test 	= IsSTOPpressed;
 352:	01 e0       	ldi	r16, 0x01	; 1
		case MachineDeflating2 :
			Test	= IsAllData;
			break;
		
		case RunComplete :			
			Test	= IsRESETpressed;
 354:	12 e0       	ldi	r17, 0x02	; 2
 356:	f1 2e       	mov	r15, r17
		
		case IsRESETpressed	:
			if ((ButtonPins & _BV(RESETPin)) == 0) //true case
			{
				State	= MachineResetted;
				Action	= ResetMachine;
 358:	b3 e0       	ldi	r27, 0x03	; 3
 35a:	eb 2e       	mov	r14, r27
		case IsMaxPrReached	:
			DCsig = adc_read_dc(); 
			if (DCsig >= MaxPr)		
			{
				State	= MachineDeflating1;
				Action	= DeflateSlowAndDisp;
 35c:	a5 e0       	ldi	r26, 0x05	; 5
 35e:	9a 2e       	mov	r9, r26
				Action 	= DispDataAndDeflateFast;
			}
			else
			{
				State 	= MachineDeflating1;
				Action 	= KeepDeflatingAndDisp;	
 360:	f6 e0       	ldi	r31, 0x06	; 6
 362:	bf 2e       	mov	r11, r31
			
		case IsAllData :
			if (SubState == MeasurementEnded)		//Progress Case
			{
				State 	= RunComplete;
				Action 	= DispDataAndDeflateFast;
 364:	e7 e0       	ldi	r30, 0x07	; 7
 366:	6e 2e       	mov	r6, r30
			SubAction		= dummyaction;

			DCsig 			= 0;
			ACsig 			= 0;

			ACmin			= BaseLine;
 368:	70 e8       	ldi	r23, 0x80	; 128
 36a:	c7 2e       	mov	r12, r23
		case DiasMeasure3 :
			SubTest	= IsACampLTEQDiasPrAmp;
			break;
		
		case DiasMeasure4 :
			SubTest	= IsDiasTrialGTEQ4;
 36c:	6e e0       	ldi	r22, 0x0E	; 14
 36e:	56 2e       	mov	r5, r22
		case DiasMeasure2 :
			SubTest	= IsACsigLTACmax;
			break;
		
		case DiasMeasure3 :
			SubTest	= IsACampLTEQDiasPrAmp;
 370:	5d e0       	ldi	r21, 0x0D	; 13
 372:	a5 2e       	mov	r10, r21
		case HRmeasure3 : 
			SubTest	= IsACsigLTbaseline2;
			break; 	
		
		case HRmeasure4 : 
			SubTest	= IsHRtrialGTEQ4;
 374:	4c e0       	ldi	r20, 0x0C	; 12
 376:	44 2e       	mov	r4, r20
		case HRmeasure2 : 
			SubTest	= IsACsigGTbaseline2;
			break; 
		
		case HRmeasure3 : 
			SubTest	= IsACsigLTbaseline2;
 378:	3b e0       	ldi	r19, 0x0B	; 11
 37a:	83 2e       	mov	r8, r19
		case HRmeasure1 : 
			SubTest	= IsACsigLTbaseline1;
			break;
		
		case HRmeasure2 : 
			SubTest	= IsACsigGTbaseline2;
 37c:	29 e0       	ldi	r18, 0x09	; 9
 37e:	32 2e       	mov	r3, r18
		case MeanMeasure4 :
			SubTest	= IsMeanTrialGTEQ4;
			break;
		
		case HRmeasure : 
			SubTest	= IsACsigGTbaseline1;
 380:	98 e0       	ldi	r25, 0x08	; 8
 382:	29 2e       	mov	r2, r25
				SubState	= DiasMeasure4;
				SubAction	= IncDiasTrial;
			}
			else
			{
				SubState	= DiasMeasure;
 384:	80 e1       	ldi	r24, 0x10	; 16
 386:	78 2e       	mov	r7, r24
	for(unsigned char i = 0;i<sizeof(StartMsg)-1;i++) display_char(StartMsg[i]); 
	
	while(1)
	{
	//State switch case
	switch (State)
 388:	80 91 9e 00 	lds	r24, 0x009E
 38c:	83 30       	cpi	r24, 0x03	; 3
 38e:	89 f0       	breq	.+34     	; 0x3b2 <main+0xa8>
 390:	84 30       	cpi	r24, 0x04	; 4
 392:	28 f4       	brcc	.+10     	; 0x39e <main+0x94>
 394:	81 30       	cpi	r24, 0x01	; 1
 396:	69 f0       	breq	.+26     	; 0x3b2 <main+0xa8>
 398:	82 30       	cpi	r24, 0x02	; 2
 39a:	a0 f4       	brcc	.+40     	; 0x3c4 <main+0xba>
 39c:	07 c0       	rjmp	.+14     	; 0x3ac <main+0xa2>
 39e:	85 30       	cpi	r24, 0x05	; 5
 3a0:	71 f0       	breq	.+28     	; 0x3be <main+0xb4>
 3a2:	85 30       	cpi	r24, 0x05	; 5
 3a4:	48 f0       	brcs	.+18     	; 0x3b8 <main+0xae>
 3a6:	86 30       	cpi	r24, 0x06	; 6
 3a8:	79 f4       	brne	.+30     	; 0x3c8 <main+0xbe>
 3aa:	0c c0       	rjmp	.+24     	; 0x3c4 <main+0xba>
	{	
		case MachineResetted:	
			Test 	= IsSTARTpressed;
 3ac:	10 92 9f 00 	sts	0x009F, r1
 3b0:	0b c0       	rjmp	.+22     	; 0x3c8 <main+0xbe>
		case MachineStopped	:
			Test 	= IsRESETpressed;
			break;
			
		case  MachineInflating2:	
			Test 	= IsMaxPrReached;
 3b2:	80 93 9f 00 	sts	0x009F, r24
 3b6:	08 c0       	rjmp	.+16     	; 0x3c8 <main+0xbe>
			break;
		
		case MachineDeflating1 :
			Test 	= IsSTOPpressed;
 3b8:	00 93 9f 00 	sts	0x009F, r16
 3bc:	05 c0       	rjmp	.+10     	; 0x3c8 <main+0xbe>
			break;
		
		case MachineDeflating2 :
			Test	= IsAllData;
 3be:	d0 92 9f 00 	sts	0x009F, r13
 3c2:	02 c0       	rjmp	.+4      	; 0x3c8 <main+0xbe>
			break;
		
		case RunComplete :			
			Test	= IsRESETpressed;
 3c4:	f0 92 9f 00 	sts	0x009F, r15
			break;
	}
	
	switch (Test)
 3c8:	90 91 9f 00 	lds	r25, 0x009F
 3cc:	92 30       	cpi	r25, 0x02	; 2
 3ce:	49 f1       	breq	.+82     	; 0x422 <main+0x118>
 3d0:	93 30       	cpi	r25, 0x03	; 3
 3d2:	30 f4       	brcc	.+12     	; 0x3e0 <main+0xd6>
 3d4:	99 23       	and	r25, r25
 3d6:	51 f0       	breq	.+20     	; 0x3ec <main+0xe2>
 3d8:	91 30       	cpi	r25, 0x01	; 1
 3da:	09 f0       	breq	.+2      	; 0x3de <main+0xd4>
 3dc:	49 c0       	rjmp	.+146    	; 0x470 <__stack+0x11>
 3de:	10 c0       	rjmp	.+32     	; 0x400 <main+0xf6>
 3e0:	93 30       	cpi	r25, 0x03	; 3
 3e2:	49 f1       	breq	.+82     	; 0x436 <main+0x12c>
 3e4:	94 30       	cpi	r25, 0x04	; 4
 3e6:	09 f0       	breq	.+2      	; 0x3ea <main+0xe0>
 3e8:	43 c0       	rjmp	.+134    	; 0x470 <__stack+0x11>
 3ea:	35 c0       	rjmp	.+106    	; 0x456 <main+0x14c>
	{
		case IsSTARTpressed	:
			if ((ButtonPins & _BV(STARTPin)) == 0) //true case
 3ec:	ca 99       	sbic	0x19, 2	; 25
 3ee:	05 c0       	rjmp	.+10     	; 0x3fa <main+0xf0>
			{
				State	= MachineInflating1;
 3f0:	00 93 9e 00 	sts	0x009E, r16
				Action	= StartInflatingAndDisp;
 3f4:	00 93 a0 00 	sts	0x00A0, r16
 3f8:	3b c0       	rjmp	.+118    	; 0x470 <__stack+0x11>
			}
			else
			{
				State	= MachineResetted;
 3fa:	10 92 9e 00 	sts	0x009E, r1
 3fe:	18 c0       	rjmp	.+48     	; 0x430 <main+0x126>
				Action	= DoNothing1;
			}				
			break;
		
		case IsSTOPpressed:
			if ((ButtonPins & _BV(STOPPin)) == 0) //true case
 400:	cb 99       	sbic	0x19, 3	; 25
 402:	05 c0       	rjmp	.+10     	; 0x40e <main+0x104>
			{
				State	= MachineStopped;
 404:	f0 92 9e 00 	sts	0x009E, r15
				Action	= DeflateFastAndDisp;
 408:	f0 92 a0 00 	sts	0x00A0, r15
 40c:	31 c0       	rjmp	.+98     	; 0x470 <__stack+0x11>
			}
			else
			{
					
				if (State == MachineInflating1) State = MachineInflating2;
 40e:	80 91 9e 00 	lds	r24, 0x009E
 412:	81 30       	cpi	r24, 0x01	; 1
 414:	19 f4       	brne	.+6      	; 0x41c <main+0x112>
 416:	e0 92 9e 00 	sts	0x009E, r14
 41a:	0a c0       	rjmp	.+20     	; 0x430 <main+0x126>
				else State = MachineDeflating2;
 41c:	90 92 9e 00 	sts	0x009E, r9
 420:	07 c0       	rjmp	.+14     	; 0x430 <main+0x126>
				Action	= DoNothing1;
			}				
			break;
		
		case IsRESETpressed	:
			if ((ButtonPins & _BV(RESETPin)) == 0) //true case
 422:	cc 99       	sbic	0x19, 4	; 25
 424:	05 c0       	rjmp	.+10     	; 0x430 <main+0x126>
			{
				State	= MachineResetted;
 426:	10 92 9e 00 	sts	0x009E, r1
				Action	= ResetMachine;
 42a:	e0 92 a0 00 	sts	0x00A0, r14
 42e:	20 c0       	rjmp	.+64     	; 0x470 <__stack+0x11>
			}
			else
			{
				if (State == RunComplete) State	= RunComplete;
				if (State == MachineStopped) State = MachineStopped;
				Action	= DoNothing1;
 430:	10 92 a0 00 	sts	0x00A0, r1
 434:	1d c0       	rjmp	.+58     	; 0x470 <__stack+0x11>
			}				
			break;
			
		case IsMaxPrReached	:
			DCsig = adc_read_dc(); 
 436:	0e 94 40 01 	call	0x280	; 0x280 <adc_read_dc>
 43a:	80 93 a4 00 	sts	0x00A4, r24
			if (DCsig >= MaxPr)		
 43e:	8b 34       	cpi	r24, 0x4B	; 75
 440:	28 f0       	brcs	.+10     	; 0x44c <main+0x142>
			{
				State	= MachineDeflating1;
 442:	d0 92 9e 00 	sts	0x009E, r13
				Action	= DeflateSlowAndDisp;
 446:	90 92 a0 00 	sts	0x00A0, r9
 44a:	12 c0       	rjmp	.+36     	; 0x470 <__stack+0x11>
			}
			else
			{
				State	= MachineInflating1;
 44c:	00 93 9e 00 	sts	0x009E, r16
				Action	= KeepInflatingAndDisp;
 450:	d0 92 a0 00 	sts	0x00A0, r13
 454:	0d c0       	rjmp	.+26     	; 0x470 <__stack+0x11>
			}
			break;
			
		case IsAllData :
			if (SubState == MeasurementEnded)		//Progress Case
 456:	80 91 a1 00 	lds	r24, 0x00A1
 45a:	85 31       	cpi	r24, 0x15	; 21
 45c:	29 f4       	brne	.+10     	; 0x468 <__stack+0x9>
			{
				State 	= RunComplete;
 45e:	b0 92 9e 00 	sts	0x009E, r11
				Action 	= DispDataAndDeflateFast;
 462:	60 92 a0 00 	sts	0x00A0, r6
 466:	04 c0       	rjmp	.+8      	; 0x470 <__stack+0x11>
			}
			else
			{
				State 	= MachineDeflating1;
 468:	90 93 9e 00 	sts	0x009E, r25
				Action 	= KeepDeflatingAndDisp;	
 46c:	b0 92 a0 00 	sts	0x00A0, r11
			}
			break;
	}
	
	switch (Action)
 470:	80 91 a0 00 	lds	r24, 0x00A0
 474:	84 30       	cpi	r24, 0x04	; 4
 476:	09 f4       	brne	.+2      	; 0x47a <__stack+0x1b>
 478:	6e c0       	rjmp	.+220    	; 0x556 <__stack+0xf7>
 47a:	85 30       	cpi	r24, 0x05	; 5
 47c:	40 f4       	brcc	.+16     	; 0x48e <__stack+0x2f>
 47e:	82 30       	cpi	r24, 0x02	; 2
 480:	01 f1       	breq	.+64     	; 0x4c2 <__stack+0x63>
 482:	83 30       	cpi	r24, 0x03	; 3
 484:	70 f5       	brcc	.+92     	; 0x4e2 <__stack+0x83>
 486:	81 30       	cpi	r24, 0x01	; 1
 488:	09 f0       	breq	.+2      	; 0x48c <__stack+0x2d>
 48a:	f9 c0       	rjmp	.+498    	; 0x67e <__stack+0x21f>
 48c:	0a c0       	rjmp	.+20     	; 0x4a2 <__stack+0x43>
 48e:	86 30       	cpi	r24, 0x06	; 6
 490:	09 f4       	brne	.+2      	; 0x494 <__stack+0x35>
 492:	81 c0       	rjmp	.+258    	; 0x596 <__stack+0x137>
 494:	86 30       	cpi	r24, 0x06	; 6
 496:	08 f4       	brcc	.+2      	; 0x49a <__stack+0x3b>
 498:	6c c0       	rjmp	.+216    	; 0x572 <__stack+0x113>
 49a:	87 30       	cpi	r24, 0x07	; 7
 49c:	09 f0       	breq	.+2      	; 0x4a0 <__stack+0x41>
 49e:	ef c0       	rjmp	.+478    	; 0x67e <__stack+0x21f>
 4a0:	91 c0       	rjmp	.+290    	; 0x5c4 <__stack+0x165>
	{
		case DoNothing1 :
			break;
			
		case StartInflatingAndDisp :
			lcd_clear ();
 4a2:	0e 94 5d 00 	call	0xba	; 0xba <lcd_clear>
			lcd_home ();
 4a6:	0e 94 69 00 	call	0xd2	; 0xd2 <lcd_home>
 4aa:	cd e6       	ldi	r28, 0x6D	; 109
 4ac:	d0 e0       	ldi	r29, 0x00	; 0
			for(unsigned char i = 0;i<sizeof(InflatingMsg)-1;i++) display_char(InflatingMsg[i]);
 4ae:	89 91       	ld	r24, Y+
 4b0:	0e 94 b1 00 	call	0x162	; 0x162 <display_char>
 4b4:	90 e0       	ldi	r25, 0x00	; 0
 4b6:	c7 37       	cpi	r28, 0x77	; 119
 4b8:	d9 07       	cpc	r29, r25
 4ba:	c9 f7       	brne	.-14     	; 0x4ae <__stack+0x4f>
			inflate_cuff ();
 4bc:	0e 94 5d 01 	call	0x2ba	; 0x2ba <inflate_cuff>
 4c0:	de c0       	rjmp	.+444    	; 0x67e <__stack+0x21f>
			break;
			
		case DeflateFastAndDisp :
			lcd_clear ();
 4c2:	0e 94 5d 00 	call	0xba	; 0xba <lcd_clear>
			lcd_home ();
 4c6:	0e 94 69 00 	call	0xd2	; 0xd2 <lcd_home>
 4ca:	c3 e8       	ldi	r28, 0x83	; 131
 4cc:	d0 e0       	ldi	r29, 0x00	; 0
			for(unsigned char i = 0;i<sizeof(DeflateFastMsg)-1;i++) display_char(DeflateFastMsg[i]);
 4ce:	89 91       	ld	r24, Y+
 4d0:	0e 94 b1 00 	call	0x162	; 0x162 <display_char>
 4d4:	80 e0       	ldi	r24, 0x00	; 0
 4d6:	cd 38       	cpi	r28, 0x8D	; 141
 4d8:	d8 07       	cpc	r29, r24
 4da:	c9 f7       	brne	.-14     	; 0x4ce <__stack+0x6f>
			deflate_fast ();
 4dc:	0e 94 68 01 	call	0x2d0	; 0x2d0 <deflate_fast>
 4e0:	ce c0       	rjmp	.+412    	; 0x67e <__stack+0x21f>
			break;
		
		case ResetMachine :
			lcd_clear ();
 4e2:	0e 94 5d 00 	call	0xba	; 0xba <lcd_clear>
			lcd_home ();
 4e6:	0e 94 69 00 	call	0xd2	; 0xd2 <lcd_home>
 4ea:	c1 e6       	ldi	r28, 0x61	; 97
 4ec:	d0 e0       	ldi	r29, 0x00	; 0
			for(unsigned char i = 0;i<sizeof(StartMsg)-1;i++) display_char(StartMsg[i]); 
 4ee:	89 91       	ld	r24, Y+
 4f0:	0e 94 b1 00 	call	0x162	; 0x162 <display_char>
 4f4:	90 e0       	ldi	r25, 0x00	; 0
 4f6:	cc 36       	cpi	r28, 0x6C	; 108
 4f8:	d9 07       	cpc	r29, r25
 4fa:	c9 f7       	brne	.-14     	; 0x4ee <__stack+0x8f>
			State 			= MachineResetted;
 4fc:	10 92 9e 00 	sts	0x009E, r1
			Test 			= IsSTARTpressed;
 500:	10 92 9f 00 	sts	0x009F, r1
			Action			= DoNothing1;
 504:	10 92 a0 00 	sts	0x00A0, r1
			SubState 		= MeasurementNotStarted;
 508:	10 92 a1 00 	sts	0x00A1, r1
			SubTest			= dummytest;
 50c:	10 92 a2 00 	sts	0x00A2, r1
			SubAction		= dummyaction;
 510:	10 92 a3 00 	sts	0x00A3, r1

			DCsig 			= 0;
 514:	10 92 a4 00 	sts	0x00A4, r1
			ACsig 			= 0;
 518:	10 92 a5 00 	sts	0x00A5, r1

			ACmin			= BaseLine;
 51c:	c0 92 60 00 	sts	0x0060, r12
			ACmax			= 0;
 520:	10 92 a6 00 	sts	0x00A6, r1
			SysTrial		= 0;
 524:	10 92 a7 00 	sts	0x00A7, r1
			SysPrData		= 0;
 528:	10 92 a8 00 	sts	0x00A8, r1
			MeanTrial		= 0;
 52c:	10 92 a9 00 	sts	0x00A9, r1
			MeanPrData		= 0;
 530:	10 92 aa 00 	sts	0x00AA, r1
			HRtrial			= 0;
 534:	10 92 ab 00 	sts	0x00AB, r1
			for(unsigned char i = 0;i<4;i++) HRtrialData[i]	= 0;
 538:	10 92 ac 00 	sts	0x00AC, r1
 53c:	10 92 ad 00 	sts	0x00AD, r1
 540:	10 92 ae 00 	sts	0x00AE, r1
 544:	10 92 af 00 	sts	0x00AF, r1
			HRData			= 0;
 548:	10 92 b0 00 	sts	0x00B0, r1
			DiasTrial		= 0;
 54c:	10 92 b1 00 	sts	0x00B1, r1
			DiasPrData		= 0;
 550:	10 92 b2 00 	sts	0x00B2, r1
 554:	94 c0       	rjmp	.+296    	; 0x67e <__stack+0x21f>
			break;
		
		case KeepInflatingAndDisp :
			lcd_home ();
 556:	0e 94 69 00 	call	0xd2	; 0xd2 <lcd_home>
 55a:	cd e6       	ldi	r28, 0x6D	; 109
 55c:	d0 e0       	ldi	r29, 0x00	; 0
			for(unsigned char i = 0;i<sizeof(InflatingMsg)-1;i++) display_char(InflatingMsg[i]);
 55e:	89 91       	ld	r24, Y+
 560:	0e 94 b1 00 	call	0x162	; 0x162 <display_char>
 564:	80 e0       	ldi	r24, 0x00	; 0
 566:	c7 37       	cpi	r28, 0x77	; 119
 568:	d8 07       	cpc	r29, r24
 56a:	c9 f7       	brne	.-14     	; 0x55e <__stack+0xff>
			display_byte ((DCsig*2 + DCsig/10));
 56c:	20 91 a4 00 	lds	r18, 0x00A4
 570:	22 c0       	rjmp	.+68     	; 0x5b6 <__stack+0x157>
			break;
		
		case DeflateSlowAndDisp :
			lcd_clear ();
 572:	0e 94 5d 00 	call	0xba	; 0xba <lcd_clear>
			lcd_home ();
 576:	0e 94 69 00 	call	0xd2	; 0xd2 <lcd_home>
 57a:	c8 e7       	ldi	r28, 0x78	; 120
 57c:	d0 e0       	ldi	r29, 0x00	; 0
			for(unsigned char i = 0;i<sizeof(DeflateSlowMsg)-1;i++) display_char(DeflateSlowMsg[i]);
 57e:	89 91       	ld	r24, Y+
 580:	0e 94 b1 00 	call	0x162	; 0x162 <display_char>
 584:	90 e0       	ldi	r25, 0x00	; 0
 586:	c2 38       	cpi	r28, 0x82	; 130
 588:	d9 07       	cpc	r29, r25
 58a:	c9 f7       	brne	.-14     	; 0x57e <__stack+0x11f>
			deflate_slow ();
 58c:	0e 94 73 01 	call	0x2e6	; 0x2e6 <deflate_slow>
			SubState = SysMeasure;
 590:	00 93 a1 00 	sts	0x00A1, r16
 594:	74 c0       	rjmp	.+232    	; 0x67e <__stack+0x21f>
			break;
			
		case KeepDeflatingAndDisp :
			lcd_home ();
 596:	0e 94 69 00 	call	0xd2	; 0xd2 <lcd_home>
 59a:	c8 e7       	ldi	r28, 0x78	; 120
 59c:	d0 e0       	ldi	r29, 0x00	; 0
			for (unsigned char i = 0;i<sizeof(DeflateSlowMsg)-1;i++) display_char(DeflateSlowMsg[i]);
 59e:	89 91       	ld	r24, Y+
 5a0:	0e 94 b1 00 	call	0x162	; 0x162 <display_char>
 5a4:	80 e0       	ldi	r24, 0x00	; 0
 5a6:	c2 38       	cpi	r28, 0x82	; 130
 5a8:	d8 07       	cpc	r29, r24
 5aa:	c9 f7       	brne	.-14     	; 0x59e <__stack+0x13f>
			DCsig = adc_read_dc ();
 5ac:	0e 94 40 01 	call	0x280	; 0x280 <adc_read_dc>
 5b0:	28 2f       	mov	r18, r24
 5b2:	80 93 a4 00 	sts	0x00A4, r24
			display_byte ((DCsig*2 + DCsig/10));
 5b6:	82 2f       	mov	r24, r18
 5b8:	6a e0       	ldi	r22, 0x0A	; 10
 5ba:	0e 94 4d 05 	call	0xa9a	; 0xa9a <__udivmodqi4>
 5be:	22 0f       	add	r18, r18
 5c0:	82 0f       	add	r24, r18
 5c2:	5b c0       	rjmp	.+182    	; 0x67a <__stack+0x21b>
			break;
			
		case DispDataAndDeflateFast :
			deflate_fast ();
 5c4:	0e 94 68 01 	call	0x2d0	; 0x2d0 <deflate_fast>
			lcd_clear ();
 5c8:	0e 94 5d 00 	call	0xba	; 0xba <lcd_clear>
			lcd_home ();
 5cc:	0e 94 69 00 	call	0xd2	; 0xd2 <lcd_home>
 5d0:	ce e8       	ldi	r28, 0x8E	; 142
 5d2:	d0 e0       	ldi	r29, 0x00	; 0
			for (unsigned char i = 0;i<sizeof(FinalMsg)-1;i++) display_char(FinalMsg[i]);
 5d4:	89 91       	ld	r24, Y+
 5d6:	0e 94 b1 00 	call	0x162	; 0x162 <display_char>
 5da:	90 e0       	ldi	r25, 0x00	; 0
 5dc:	cd 39       	cpi	r28, 0x9D	; 157
 5de:	d9 07       	cpc	r29, r25
 5e0:	c9 f7       	brne	.-14     	; 0x5d4 <__stack+0x175>
			move_to (0,1);
 5e2:	80 e0       	ldi	r24, 0x00	; 0
 5e4:	61 e0       	ldi	r22, 0x01	; 1
 5e6:	0e 94 29 01 	call	0x252	; 0x252 <move_to>
			display_byte ((SysPrData*2 + SysPrData/10));
 5ea:	20 91 a8 00 	lds	r18, 0x00A8
 5ee:	82 2f       	mov	r24, r18
 5f0:	6a e0       	ldi	r22, 0x0A	; 10
 5f2:	0e 94 4d 05 	call	0xa9a	; 0xa9a <__udivmodqi4>
 5f6:	22 0f       	add	r18, r18
 5f8:	82 0f       	add	r24, r18
 5fa:	0e 94 bc 00 	call	0x178	; 0x178 <display_byte>
			display_char ('/');
 5fe:	8f e2       	ldi	r24, 0x2F	; 47
 600:	0e 94 b1 00 	call	0x162	; 0x162 <display_char>
			display_byte ((MeanPrData*2 + MeanPrData/10));
 604:	20 91 aa 00 	lds	r18, 0x00AA
 608:	82 2f       	mov	r24, r18
 60a:	6a e0       	ldi	r22, 0x0A	; 10
 60c:	0e 94 4d 05 	call	0xa9a	; 0xa9a <__udivmodqi4>
 610:	22 0f       	add	r18, r18
 612:	82 0f       	add	r24, r18
 614:	0e 94 bc 00 	call	0x178	; 0x178 <display_byte>
			display_char ('/');
 618:	8f e2       	ldi	r24, 0x2F	; 47
 61a:	0e 94 b1 00 	call	0x162	; 0x162 <display_char>
			display_byte ((DiasPrData*2 + DiasPrData/10));
 61e:	20 91 b2 00 	lds	r18, 0x00B2
 622:	82 2f       	mov	r24, r18
 624:	6a e0       	ldi	r22, 0x0A	; 10
 626:	0e 94 4d 05 	call	0xa9a	; 0xa9a <__udivmodqi4>
 62a:	22 0f       	add	r18, r18
 62c:	82 0f       	add	r24, r18
 62e:	0e 94 bc 00 	call	0x178	; 0x178 <display_byte>
			display_char ('/');
 632:	8f e2       	ldi	r24, 0x2F	; 47
 634:	0e 94 b1 00 	call	0x162	; 0x162 <display_char>
			for (unsigned char i = 0;i<4;i++) HRData += (HRtrialData [i])/4;
 638:	90 91 b0 00 	lds	r25, 0x00B0
 63c:	80 91 ac 00 	lds	r24, 0x00AC
 640:	86 95       	lsr	r24
 642:	86 95       	lsr	r24
 644:	89 0f       	add	r24, r25
 646:	90 91 ad 00 	lds	r25, 0x00AD
 64a:	96 95       	lsr	r25
 64c:	96 95       	lsr	r25
 64e:	98 0f       	add	r25, r24
 650:	80 91 ae 00 	lds	r24, 0x00AE
 654:	86 95       	lsr	r24
 656:	86 95       	lsr	r24
 658:	89 0f       	add	r24, r25
 65a:	60 91 af 00 	lds	r22, 0x00AF
 65e:	66 95       	lsr	r22
 660:	66 95       	lsr	r22
 662:	68 0f       	add	r22, r24
 664:	60 93 b0 00 	sts	0x00B0, r22
			display_byte (((60/HRprescalar)*(100/HRData)*10));
 668:	84 e6       	ldi	r24, 0x64	; 100
 66a:	90 e0       	ldi	r25, 0x00	; 0
 66c:	70 e0       	ldi	r23, 0x00	; 0
 66e:	0e 94 6d 05 	call	0xada	; 0xada <__divmodhi4>
 672:	98 e2       	ldi	r25, 0x28	; 40
 674:	69 9f       	mul	r22, r25
 676:	80 2d       	mov	r24, r0
 678:	11 24       	eor	r1, r1
 67a:	0e 94 bc 00 	call	0x178	; 0x178 <display_byte>
			break;
	}
	
	//if (SubState == MeasurementNotStarted || SubState == MeasurementEnded) continue;
	
	switch (SubState)
 67e:	80 91 a1 00 	lds	r24, 0x00A1
 682:	90 e0       	ldi	r25, 0x00	; 0
 684:	fc 01       	movw	r30, r24
 686:	31 97       	sbiw	r30, 0x01	; 1
 688:	e4 31       	cpi	r30, 0x14	; 20
 68a:	f1 05       	cpc	r31, r1
 68c:	90 f5       	brcc	.+100    	; 0x6f2 <__stack+0x293>
 68e:	e6 5d       	subi	r30, 0xD6	; 214
 690:	ff 4f       	sbci	r31, 0xFF	; 255
 692:	ee 0f       	add	r30, r30
 694:	ff 1f       	adc	r31, r31
 696:	05 90       	lpm	r0, Z+
 698:	f4 91       	lpm	r31, Z+
 69a:	e0 2d       	mov	r30, r0
 69c:	09 94       	ijmp
		case SysMeasure2 :
			SubTest	= IsACsigLTACmax;
			break;
		
		case SysMeasure3 :
			SubTest	= IsACampGTEQSysPrAmp;
 69e:	d0 92 a2 00 	sts	0x00A2, r13
 6a2:	27 c0       	rjmp	.+78     	; 0x6f2 <__stack+0x293>
			break;
		
		case SysMeasure4 :
			SubTest	= IsSysTrialGTEQ4;
 6a4:	90 92 a2 00 	sts	0x00A2, r9
 6a8:	24 c0       	rjmp	.+72     	; 0x6f2 <__stack+0x293>
		case MeanMeasure2 :
			SubTest	= IsACsigLTACmax;
			break;
		
		case MeanMeasure3 :
			SubTest	= IsACampGTEQMeanPrAmp;
 6aa:	b0 92 a2 00 	sts	0x00A2, r11
 6ae:	21 c0       	rjmp	.+66     	; 0x6f2 <__stack+0x293>
			break;
		
		case MeanMeasure4 :
			SubTest	= IsMeanTrialGTEQ4;
 6b0:	60 92 a2 00 	sts	0x00A2, r6
 6b4:	1e c0       	rjmp	.+60     	; 0x6f2 <__stack+0x293>
			break;
		
		case HRmeasure : 
			SubTest	= IsACsigGTbaseline1;
 6b6:	20 92 a2 00 	sts	0x00A2, r2
 6ba:	1b c0       	rjmp	.+54     	; 0x6f2 <__stack+0x293>
			break;
		
		case HRmeasure1 : 
			SubTest	= IsACsigLTbaseline1;
 6bc:	8a e0       	ldi	r24, 0x0A	; 10
 6be:	80 93 a2 00 	sts	0x00A2, r24
 6c2:	17 c0       	rjmp	.+46     	; 0x6f2 <__stack+0x293>
			break;
		
		case HRmeasure2 : 
			SubTest	= IsACsigGTbaseline2;
 6c4:	30 92 a2 00 	sts	0x00A2, r3
 6c8:	14 c0       	rjmp	.+40     	; 0x6f2 <__stack+0x293>
			break; 
		
		case HRmeasure3 : 
			SubTest	= IsACsigLTbaseline2;
 6ca:	80 92 a2 00 	sts	0x00A2, r8
 6ce:	11 c0       	rjmp	.+34     	; 0x6f2 <__stack+0x293>
			break; 	
		
		case HRmeasure4 : 
			SubTest	= IsHRtrialGTEQ4;
 6d0:	40 92 a2 00 	sts	0x00A2, r4
 6d4:	0e c0       	rjmp	.+28     	; 0x6f2 <__stack+0x293>
			break;	
		
		case DiasMeasure :
			SubTest	= IsACsigLTACmin;
 6d6:	00 93 a2 00 	sts	0x00A2, r16
 6da:	0b c0       	rjmp	.+22     	; 0x6f2 <__stack+0x293>
			break;
		
		case DiasMeasure1 :
			SubTest	= IsACsigGTACmin;
 6dc:	f0 92 a2 00 	sts	0x00A2, r15
 6e0:	08 c0       	rjmp	.+16     	; 0x6f2 <__stack+0x293>
			break;
		
		case DiasMeasure2 :
			SubTest	= IsACsigLTACmax;
 6e2:	e0 92 a2 00 	sts	0x00A2, r14
 6e6:	05 c0       	rjmp	.+10     	; 0x6f2 <__stack+0x293>
			break;
		
		case DiasMeasure3 :
			SubTest	= IsACampLTEQDiasPrAmp;
 6e8:	a0 92 a2 00 	sts	0x00A2, r10
 6ec:	02 c0       	rjmp	.+4      	; 0x6f2 <__stack+0x293>
			break;
		
		case DiasMeasure4 :
			SubTest	= IsDiasTrialGTEQ4;
 6ee:	50 92 a2 00 	sts	0x00A2, r5
		
		case MeasurementEnded :
			break;
	}
	
	switch (SubTest)
 6f2:	10 91 a2 00 	lds	r17, 0x00A2
 6f6:	17 30       	cpi	r17, 0x07	; 7
 6f8:	09 f4       	brne	.+2      	; 0x6fc <__stack+0x29d>
 6fa:	cc c0       	rjmp	.+408    	; 0x894 <__stack+0x435>
 6fc:	18 30       	cpi	r17, 0x08	; 8
 6fe:	b0 f4       	brcc	.+44     	; 0x72c <__stack+0x2cd>
 700:	13 30       	cpi	r17, 0x03	; 3
 702:	09 f4       	brne	.+2      	; 0x706 <__stack+0x2a7>
 704:	72 c0       	rjmp	.+228    	; 0x7ea <__stack+0x38b>
 706:	14 30       	cpi	r17, 0x04	; 4
 708:	30 f4       	brcc	.+12     	; 0x716 <__stack+0x2b7>
 70a:	11 30       	cpi	r17, 0x01	; 1
 70c:	29 f1       	breq	.+74     	; 0x758 <__stack+0x2f9>
 70e:	12 30       	cpi	r17, 0x02	; 2
 710:	09 f0       	breq	.+2      	; 0x714 <__stack+0x2b5>
 712:	36 c1       	rjmp	.+620    	; 0x980 <__stack+0x521>
 714:	43 c0       	rjmp	.+134    	; 0x79c <__stack+0x33d>
 716:	15 30       	cpi	r17, 0x05	; 5
 718:	09 f4       	brne	.+2      	; 0x71c <__stack+0x2bd>
 71a:	9d c0       	rjmp	.+314    	; 0x856 <__stack+0x3f7>
 71c:	20 91 60 00 	lds	r18, 0x0060
 720:	80 91 a6 00 	lds	r24, 0x00A6
 724:	16 30       	cpi	r17, 0x06	; 6
 726:	08 f0       	brcs	.+2      	; 0x72a <__stack+0x2cb>
 728:	a4 c0       	rjmp	.+328    	; 0x872 <__stack+0x413>
 72a:	87 c0       	rjmp	.+270    	; 0x83a <__stack+0x3db>
 72c:	1b 30       	cpi	r17, 0x0B	; 11
 72e:	09 f4       	brne	.+2      	; 0x732 <__stack+0x2d3>
 730:	e5 c0       	rjmp	.+458    	; 0x8fc <__stack+0x49d>
 732:	1c 30       	cpi	r17, 0x0C	; 12
 734:	38 f4       	brcc	.+14     	; 0x744 <__stack+0x2e5>
 736:	19 30       	cpi	r17, 0x09	; 9
 738:	09 f4       	brne	.+2      	; 0x73c <__stack+0x2dd>
 73a:	d2 c0       	rjmp	.+420    	; 0x8e0 <__stack+0x481>
 73c:	1a 30       	cpi	r17, 0x0A	; 10
 73e:	08 f0       	brcs	.+2      	; 0x742 <__stack+0x2e3>
 740:	c6 c0       	rjmp	.+396    	; 0x8ce <__stack+0x46f>
 742:	b7 c0       	rjmp	.+366    	; 0x8b2 <__stack+0x453>
 744:	1d 30       	cpi	r17, 0x0D	; 13
 746:	09 f4       	brne	.+2      	; 0x74a <__stack+0x2eb>
 748:	f8 c0       	rjmp	.+496    	; 0x93a <__stack+0x4db>
 74a:	1d 30       	cpi	r17, 0x0D	; 13
 74c:	08 f4       	brcc	.+2      	; 0x750 <__stack+0x2f1>
 74e:	e7 c0       	rjmp	.+462    	; 0x91e <__stack+0x4bf>
 750:	1e 30       	cpi	r17, 0x0E	; 14
 752:	09 f0       	breq	.+2      	; 0x756 <__stack+0x2f7>
 754:	15 c1       	rjmp	.+554    	; 0x980 <__stack+0x521>
 756:	05 c1       	rjmp	.+522    	; 0x962 <__stack+0x503>
	{
		case dummytest : 
			break;
			
		case IsACsigLTACmin:
			ACsig = adc_read_ac ();
 758:	0e 94 4a 01 	call	0x294	; 0x294 <adc_read_ac>
 75c:	80 93 a5 00 	sts	0x00A5, r24
			if (ACsig < ACmin)
 760:	90 91 60 00 	lds	r25, 0x0060
 764:	20 91 a1 00 	lds	r18, 0x00A1
 768:	89 17       	cp	r24, r25
 76a:	90 f4       	brcc	.+36     	; 0x790 <__stack+0x331>
			{
				if (SubState == SysMeasure) SubState	= SysMeasure1;
 76c:	21 30       	cpi	r18, 0x01	; 1
 76e:	11 f4       	brne	.+4      	; 0x774 <__stack+0x315>
 770:	f0 92 a1 00 	sts	0x00A1, r15
				if (SubState == DiasMeasure) SubState	= DiasMeasure1;
 774:	80 91 a1 00 	lds	r24, 0x00A1
 778:	80 31       	cpi	r24, 0x10	; 16
 77a:	19 f4       	brne	.+6      	; 0x782 <__stack+0x323>
 77c:	81 e1       	ldi	r24, 0x11	; 17
 77e:	80 93 a1 00 	sts	0x00A1, r24
				if (SubState == MeanMeasure) SubState	= MeanMeasure1;
 782:	80 91 a1 00 	lds	r24, 0x00A1
 786:	86 30       	cpi	r24, 0x06	; 6
 788:	69 f5       	brne	.+90     	; 0x7e4 <__stack+0x385>
 78a:	60 92 a1 00 	sts	0x00A1, r6
 78e:	2a c0       	rjmp	.+84     	; 0x7e4 <__stack+0x385>
				SubAction	= MakeACminEQACsig;
			}
			else
			{
				if (SubState == SysMeasure) SubState	= SysMeasure;
 790:	21 30       	cpi	r18, 0x01	; 1
 792:	09 f0       	breq	.+2      	; 0x796 <__stack+0x337>
 794:	96 c0       	rjmp	.+300    	; 0x8c2 <__stack+0x463>
 796:	20 93 a1 00 	sts	0x00A1, r18
 79a:	93 c0       	rjmp	.+294    	; 0x8c2 <__stack+0x463>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 79c:	82 ee       	ldi	r24, 0xE2	; 226
 79e:	94 e0       	ldi	r25, 0x04	; 4
 7a0:	01 97       	sbiw	r24, 0x01	; 1
 7a2:	f1 f7       	brne	.-4      	; 0x7a0 <__stack+0x341>
			}
			break;
			
		case IsACsigGTACmin:
			_delay_ms(5);
			ACsig = adc_read_ac ();
 7a4:	0e 94 4a 01 	call	0x294	; 0x294 <adc_read_ac>
 7a8:	80 93 a5 00 	sts	0x00A5, r24
			if (ACsig > ACmin)
 7ac:	90 91 60 00 	lds	r25, 0x0060
 7b0:	20 91 a1 00 	lds	r18, 0x00A1
 7b4:	98 17       	cp	r25, r24
 7b6:	90 f4       	brcc	.+36     	; 0x7dc <__stack+0x37d>
			{
				if (SubState == SysMeasure1) SubState	= SysMeasure2;
 7b8:	22 30       	cpi	r18, 0x02	; 2
 7ba:	11 f4       	brne	.+4      	; 0x7c0 <__stack+0x361>
 7bc:	e0 92 a1 00 	sts	0x00A1, r14
				if (SubState == DiasMeasure1) SubState	= DiasMeasure2;
 7c0:	80 91 a1 00 	lds	r24, 0x00A1
 7c4:	81 31       	cpi	r24, 0x11	; 17
 7c6:	19 f4       	brne	.+6      	; 0x7ce <__stack+0x36f>
 7c8:	82 e1       	ldi	r24, 0x12	; 18
 7ca:	80 93 a1 00 	sts	0x00A1, r24
				if (SubState == MeanMeasure1) SubState	= MeanMeasure2;
 7ce:	80 91 a1 00 	lds	r24, 0x00A1
 7d2:	87 30       	cpi	r24, 0x07	; 7
 7d4:	79 f5       	brne	.+94     	; 0x834 <__stack+0x3d5>
 7d6:	20 92 a1 00 	sts	0x00A1, r2
 7da:	2c c0       	rjmp	.+88     	; 0x834 <__stack+0x3d5>
				SubAction	= MakeACmaxEQACsig;
			}
			else
			{
				if (SubState == SysMeasure1) SubState	= SysMeasure1;
 7dc:	22 30       	cpi	r18, 0x02	; 2
 7de:	11 f4       	brne	.+4      	; 0x7e4 <__stack+0x385>
 7e0:	20 93 a1 00 	sts	0x00A1, r18
				if (SubState == DiasMeasure1) SubState	= DiasMeasure1;
				if (SubState == MeanMeasure1) SubState	= MeanMeasure1;
				SubAction	= MakeACminEQACsig;
 7e4:	f0 92 a3 00 	sts	0x00A3, r15
 7e8:	cb c0       	rjmp	.+406    	; 0x980 <__stack+0x521>
 7ea:	82 ee       	ldi	r24, 0xE2	; 226
 7ec:	94 e0       	ldi	r25, 0x04	; 4
 7ee:	01 97       	sbiw	r24, 0x01	; 1
 7f0:	f1 f7       	brne	.-4      	; 0x7ee <__stack+0x38f>
			}
			break;
			
		case IsACsigLTACmax:
			_delay_ms(5);
			ACsig = adc_read_ac ();
 7f2:	0e 94 4a 01 	call	0x294	; 0x294 <adc_read_ac>
 7f6:	80 93 a5 00 	sts	0x00A5, r24
			if (ACsig < ACmax)
 7fa:	90 91 a6 00 	lds	r25, 0x00A6
 7fe:	20 91 a1 00 	lds	r18, 0x00A1
 802:	89 17       	cp	r24, r25
 804:	98 f4       	brcc	.+38     	; 0x82c <__stack+0x3cd>
			{
				if (SubState == SysMeasure2) SubState	= SysMeasure3;
 806:	23 30       	cpi	r18, 0x03	; 3
 808:	11 f4       	brne	.+4      	; 0x80e <__stack+0x3af>
 80a:	d0 92 a1 00 	sts	0x00A1, r13
				if (SubState == DiasMeasure2) SubState	= DiasMeasure3;
 80e:	80 91 a1 00 	lds	r24, 0x00A1
 812:	82 31       	cpi	r24, 0x12	; 18
 814:	19 f4       	brne	.+6      	; 0x81c <__stack+0x3bd>
 816:	83 e1       	ldi	r24, 0x13	; 19
 818:	80 93 a1 00 	sts	0x00A1, r24
				if (SubState == MeanMeasure2) SubState	= MeanMeasure3;
 81c:	80 91 a1 00 	lds	r24, 0x00A1
 820:	88 30       	cpi	r24, 0x08	; 8
 822:	09 f0       	breq	.+2      	; 0x826 <__stack+0x3c7>
 824:	4e c0       	rjmp	.+156    	; 0x8c2 <__stack+0x463>
 826:	30 92 a1 00 	sts	0x00A1, r3
 82a:	4b c0       	rjmp	.+150    	; 0x8c2 <__stack+0x463>
				SubAction	= DoNothing2;
			}
			else
			{
				if (SubState == SysMeasure2) SubState	= SysMeasure2;
 82c:	23 30       	cpi	r18, 0x03	; 3
 82e:	11 f4       	brne	.+4      	; 0x834 <__stack+0x3d5>
 830:	20 93 a1 00 	sts	0x00A1, r18
				if (SubState == DiasMeasure2) SubState	= DiasMeasure2;
				if (SubState == MeanMeasure2) SubState	= MeanMeasure2;
				SubAction	= MakeACmaxEQACsig;
 834:	e0 92 a3 00 	sts	0x00A3, r14
 838:	a3 c0       	rjmp	.+326    	; 0x980 <__stack+0x521>
			}
			break;
			
		case IsACampGTEQSysPrAmp:
			if (((ACmax - ACmin) >= SysPrAmpLL) && ((ACmax - ACmin) <= SysPrAmpHL))
 83a:	90 e0       	ldi	r25, 0x00	; 0
 83c:	82 1b       	sub	r24, r18
 83e:	91 09       	sbc	r25, r1
 840:	80 97       	sbiw	r24, 0x20	; 32
 842:	44 97       	sbiw	r24, 0x14	; 20
 844:	28 f4       	brcc	.+10     	; 0x850 <__stack+0x3f1>
			{
				SubState	= SysMeasure4;
 846:	90 92 a1 00 	sts	0x00A1, r9
				SubAction	= IncSysTrial;
 84a:	90 92 a3 00 	sts	0x00A3, r9
 84e:	98 c0       	rjmp	.+304    	; 0x980 <__stack+0x521>
			}
			else
			{
				SubState	= SysMeasure;
 850:	00 93 a1 00 	sts	0x00A1, r16
 854:	83 c0       	rjmp	.+262    	; 0x95c <__stack+0x4fd>
				SubAction	= ResetACmin;
			}
			break;
			
		case IsSysTrialGTEQ4 :
			if (SysTrial >= 4) 
 856:	80 91 a7 00 	lds	r24, 0x00A7
 85a:	84 30       	cpi	r24, 0x04	; 4
 85c:	28 f0       	brcs	.+10     	; 0x868 <__stack+0x409>
			{
				SubState	= MeanMeasure;
 85e:	b0 92 a1 00 	sts	0x00A1, r11
				SubAction	= SysStoreAndResetACmin;
 862:	60 92 a3 00 	sts	0x00A3, r6
 866:	8c c0       	rjmp	.+280    	; 0x980 <__stack+0x521>
			}
			else
			{
				SubState	= SysMeasure;
 868:	00 93 a1 00 	sts	0x00A1, r16
				SubAction	= NextSysTrial;
 86c:	b0 92 a3 00 	sts	0x00A3, r11
 870:	87 c0       	rjmp	.+270    	; 0x980 <__stack+0x521>
			}
			break;	
		
		case IsACampGTEQMeanPrAmp:
			if (((ACmax - ACmin) >= MeanPrAmpLL) && ((ACmax - ACmin) <= MeanPrAmpHL))
 872:	90 e0       	ldi	r25, 0x00	; 0
 874:	82 1b       	sub	r24, r18
 876:	91 09       	sbc	r25, r1
 878:	82 55       	subi	r24, 0x52	; 82
 87a:	90 40       	sbci	r25, 0x00	; 0
 87c:	88 34       	cpi	r24, 0x48	; 72
 87e:	91 05       	cpc	r25, r1
 880:	30 f4       	brcc	.+12     	; 0x88e <__stack+0x42f>
			{
				SubState	= MeanMeasure4;
 882:	8a e0       	ldi	r24, 0x0A	; 10
 884:	80 93 a1 00 	sts	0x00A1, r24
				SubAction	= IncMeanTrial;
 888:	20 92 a3 00 	sts	0x00A3, r2
 88c:	79 c0       	rjmp	.+242    	; 0x980 <__stack+0x521>
			}
			else
			{
				SubState	= MeanMeasure;
 88e:	b0 92 a1 00 	sts	0x00A1, r11
 892:	64 c0       	rjmp	.+200    	; 0x95c <__stack+0x4fd>
				SubAction	= ResetACmin;
			}
			break;
			
		case IsMeanTrialGTEQ4 :
			if (MeanTrial >= 4) 
 894:	80 91 a9 00 	lds	r24, 0x00A9
 898:	84 30       	cpi	r24, 0x04	; 4
 89a:	30 f0       	brcs	.+12     	; 0x8a8 <__stack+0x449>
			{
				SubState	= HRmeasure;
 89c:	80 92 a1 00 	sts	0x00A1, r8
				SubAction	= MeanStoreAndResetACmin;
 8a0:	8a e0       	ldi	r24, 0x0A	; 10
 8a2:	80 93 a3 00 	sts	0x00A3, r24
 8a6:	6c c0       	rjmp	.+216    	; 0x980 <__stack+0x521>
			}
			else
			{
				SubState	= MeanMeasure;
 8a8:	b0 92 a1 00 	sts	0x00A1, r11
				SubAction	= NextMeanTrial;
 8ac:	30 92 a3 00 	sts	0x00A3, r3
 8b0:	67 c0       	rjmp	.+206    	; 0x980 <__stack+0x521>
			}
			break;	
		
		case IsACsigGTbaseline1 :
			ACsig = adc_read_ac(); 
 8b2:	0e 94 4a 01 	call	0x294	; 0x294 <adc_read_ac>
 8b6:	80 93 a5 00 	sts	0x00A5, r24
			if (ACsig > BaseLine)
 8ba:	81 38       	cpi	r24, 0x81	; 129
 8bc:	28 f0       	brcs	.+10     	; 0x8c8 <__stack+0x469>
			{
				SubState	= HRmeasure1;
 8be:	40 92 a1 00 	sts	0x00A1, r4
				SubAction	= DoNothing2;
 8c2:	00 93 a3 00 	sts	0x00A3, r16
 8c6:	5c c0       	rjmp	.+184    	; 0x980 <__stack+0x521>
			}
			else
			{
				SubState	= HRmeasure;
 8c8:	80 92 a1 00 	sts	0x00A1, r8
 8cc:	fa cf       	rjmp	.-12     	; 0x8c2 <__stack+0x463>
				SubAction	= DoNothing2;
			}
			break;
		
		case IsACsigLTbaseline1 : 
			ACsig = adc_read_ac(); 
 8ce:	0e 94 4a 01 	call	0x294	; 0x294 <adc_read_ac>
 8d2:	80 93 a5 00 	sts	0x00A5, r24
			if (ACsig < BaseLine)
 8d6:	87 fd       	sbrc	r24, 7
 8d8:	f2 cf       	rjmp	.-28     	; 0x8be <__stack+0x45f>
			{
				SubState	= HRmeasure2;
 8da:	a0 92 a1 00 	sts	0x00A1, r10
 8de:	f1 cf       	rjmp	.-30     	; 0x8c2 <__stack+0x463>
				SubAction	= DoNothing2;
			}
			break;
		
		case IsACsigGTbaseline2 : 
			ACsig = adc_read_ac(); 
 8e0:	0e 94 4a 01 	call	0x294	; 0x294 <adc_read_ac>
 8e4:	80 93 a5 00 	sts	0x00A5, r24
			if (ACsig > BaseLine)
 8e8:	81 38       	cpi	r24, 0x81	; 129
 8ea:	18 f0       	brcs	.+6      	; 0x8f2 <__stack+0x493>
			{
				SubState	= HRmeasure3;
 8ec:	50 92 a1 00 	sts	0x00A1, r5
 8f0:	e8 cf       	rjmp	.-48     	; 0x8c2 <__stack+0x463>
				SubAction	= DoNothing2;
			}
			else
			{
				SubState	= HRmeasure2;
 8f2:	a0 92 a1 00 	sts	0x00A1, r10
				SubAction	= WaitAndIncHRtrialData;
 8f6:	80 92 a3 00 	sts	0x00A3, r8
 8fa:	42 c0       	rjmp	.+132    	; 0x980 <__stack+0x521>
			}
			break;

		case IsACsigLTbaseline2 : 
			ACsig = adc_read_ac(); 
 8fc:	0e 94 4a 01 	call	0x294	; 0x294 <adc_read_ac>
 900:	80 93 a5 00 	sts	0x00A5, r24
			if (ACsig < BaseLine)
 904:	87 fd       	sbrc	r24, 7
 906:	06 c0       	rjmp	.+12     	; 0x914 <__stack+0x4b5>
			{
				SubState	= HRmeasure4;
 908:	9f e0       	ldi	r25, 0x0F	; 15
 90a:	90 93 a1 00 	sts	0x00A1, r25
				SubAction	= IncHRtrial;
 90e:	40 92 a3 00 	sts	0x00A3, r4
 912:	36 c0       	rjmp	.+108    	; 0x980 <__stack+0x521>
			}
			else
			{
				SubState	= HRmeasure3;
 914:	50 92 a1 00 	sts	0x00A1, r5
				SubAction	= WaitAndIncHRtrialData;
 918:	10 93 a3 00 	sts	0x00A3, r17
 91c:	31 c0       	rjmp	.+98     	; 0x980 <__stack+0x521>
			}
			break;

		case IsHRtrialGTEQ4 : 
			if (HRtrial >= 4)	//will hopefully never go above 4
 91e:	80 91 ab 00 	lds	r24, 0x00AB
 922:	84 30       	cpi	r24, 0x04	; 4
 924:	28 f0       	brcs	.+10     	; 0x930 <__stack+0x4d1>
			{
				SubState	= DiasMeasure;
 926:	70 92 a1 00 	sts	0x00A1, r7
				SubAction	= HRStore;
 92a:	50 92 a3 00 	sts	0x00A3, r5
 92e:	28 c0       	rjmp	.+80     	; 0x980 <__stack+0x521>
			}
			else
			{
				SubState	= HRmeasure2;	//should this be HRmeasure?
 930:	a0 92 a1 00 	sts	0x00A1, r10
				SubAction	= NextHRtrial;
 934:	a0 92 a3 00 	sts	0x00A3, r10
 938:	23 c0       	rjmp	.+70     	; 0x980 <__stack+0x521>
			}
			break;
			
		case IsACampLTEQDiasPrAmp:
			if (((ACmax - ACmin) >= DiasPrAmpLL) && ((ACmax - ACmin) <= DiasPrAmpHL))
 93a:	80 91 a6 00 	lds	r24, 0x00A6
 93e:	90 e0       	ldi	r25, 0x00	; 0
 940:	20 91 60 00 	lds	r18, 0x0060
 944:	82 1b       	sub	r24, r18
 946:	91 09       	sbc	r25, r1
 948:	c3 97       	sbiw	r24, 0x33	; 51
 94a:	80 97       	sbiw	r24, 0x20	; 32
 94c:	28 f4       	brcc	.+10     	; 0x958 <__stack+0x4f9>
			{
				SubState	= DiasMeasure4;
 94e:	84 e1       	ldi	r24, 0x14	; 20
 950:	80 93 a1 00 	sts	0x00A1, r24
				SubAction	= IncDiasTrial;
 954:	9f e0       	ldi	r25, 0x0F	; 15
 956:	0d c0       	rjmp	.+26     	; 0x972 <__stack+0x513>
			}
			else
			{
				SubState	= DiasMeasure;
 958:	70 92 a1 00 	sts	0x00A1, r7
				SubAction	= ResetACmin;
 95c:	d0 92 a3 00 	sts	0x00A3, r13
 960:	0f c0       	rjmp	.+30     	; 0x980 <__stack+0x521>
			}
			break;		
		
		case IsDiasTrialGTEQ4 : 
			if (DiasTrial >= 4)
 962:	80 91 b1 00 	lds	r24, 0x00B1
 966:	84 30       	cpi	r24, 0x04	; 4
 968:	38 f0       	brcs	.+14     	; 0x978 <__stack+0x519>
			{
				SubState	= MeasurementEnded;
 96a:	85 e1       	ldi	r24, 0x15	; 21
 96c:	80 93 a1 00 	sts	0x00A1, r24
				SubAction	= DiasStore;
 970:	91 e1       	ldi	r25, 0x11	; 17
 972:	90 93 a3 00 	sts	0x00A3, r25
 976:	04 c0       	rjmp	.+8      	; 0x980 <__stack+0x521>
			}
			else
			{
				SubState	= DiasMeasure;
 978:	70 92 a1 00 	sts	0x00A1, r7
				SubAction	= NextDiasTrial;
 97c:	70 92 a3 00 	sts	0x00A3, r7
			}
			break;
	}
	
	switch (SubAction)
 980:	80 91 a3 00 	lds	r24, 0x00A3
 984:	88 30       	cpi	r24, 0x08	; 8
 986:	09 f4       	brne	.+2      	; 0x98a <__stack+0x52b>
 988:	43 c0       	rjmp	.+134    	; 0xa10 <__stack+0x5b1>
 98a:	89 30       	cpi	r24, 0x09	; 9
 98c:	88 f4       	brcc	.+34     	; 0x9b0 <__stack+0x551>
 98e:	84 30       	cpi	r24, 0x04	; 4
 990:	09 f4       	brne	.+2      	; 0x994 <__stack+0x535>
 992:	7b c0       	rjmp	.+246    	; 0xa8a <__stack+0x62b>
 994:	85 30       	cpi	r24, 0x05	; 5
 996:	30 f4       	brcc	.+12     	; 0x9a4 <__stack+0x545>
 998:	82 30       	cpi	r24, 0x02	; 2
 99a:	f1 f0       	breq	.+60     	; 0x9d8 <__stack+0x579>
 99c:	83 30       	cpi	r24, 0x03	; 3
 99e:	09 f0       	breq	.+2      	; 0x9a2 <__stack+0x543>
 9a0:	f3 cc       	rjmp	.-1562   	; 0x388 <main+0x7e>
 9a2:	1f c0       	rjmp	.+62     	; 0x9e2 <__stack+0x583>
 9a4:	86 30       	cpi	r24, 0x06	; 6
 9a6:	09 f4       	brne	.+2      	; 0x9aa <__stack+0x54b>
 9a8:	70 c0       	rjmp	.+224    	; 0xa8a <__stack+0x62b>
 9aa:	87 30       	cpi	r24, 0x07	; 7
 9ac:	60 f5       	brcc	.+88     	; 0xa06 <__stack+0x5a7>
 9ae:	1e c0       	rjmp	.+60     	; 0x9ec <__stack+0x58d>
 9b0:	8c 30       	cpi	r24, 0x0C	; 12
 9b2:	09 f4       	brne	.+2      	; 0x9b6 <__stack+0x557>
 9b4:	57 c0       	rjmp	.+174    	; 0xa64 <__stack+0x605>
 9b6:	8d 30       	cpi	r24, 0x0D	; 13
 9b8:	28 f4       	brcc	.+10     	; 0x9c4 <__stack+0x565>
 9ba:	8a 30       	cpi	r24, 0x0A	; 10
 9bc:	b1 f1       	breq	.+108    	; 0xa2a <__stack+0x5cb>
 9be:	8b 30       	cpi	r24, 0x0B	; 11
 9c0:	c8 f5       	brcc	.+114    	; 0xa34 <__stack+0x5d5>
 9c2:	63 c0       	rjmp	.+198    	; 0xa8a <__stack+0x62b>
 9c4:	80 31       	cpi	r24, 0x10	; 16
 9c6:	09 f4       	brne	.+2      	; 0x9ca <__stack+0x56b>
 9c8:	60 c0       	rjmp	.+192    	; 0xa8a <__stack+0x62b>
 9ca:	81 31       	cpi	r24, 0x11	; 17
 9cc:	09 f4       	brne	.+2      	; 0x9d0 <__stack+0x571>
 9ce:	60 c0       	rjmp	.+192    	; 0xa90 <__stack+0x631>
 9d0:	8f 30       	cpi	r24, 0x0F	; 15
 9d2:	09 f0       	breq	.+2      	; 0x9d6 <__stack+0x577>
 9d4:	d9 cc       	rjmp	.-1614   	; 0x388 <main+0x7e>
 9d6:	4c c0       	rjmp	.+152    	; 0xa70 <__stack+0x611>
				
		case DoNothing2 :
			break;
		
		case MakeACminEQACsig:
			ACmin	= ACsig;
 9d8:	80 91 a5 00 	lds	r24, 0x00A5
 9dc:	80 93 60 00 	sts	0x0060, r24
 9e0:	d3 cc       	rjmp	.-1626   	; 0x388 <main+0x7e>
			break;

		case MakeACmaxEQACsig:
			ACmax	= ACsig;
 9e2:	80 91 a5 00 	lds	r24, 0x00A5
 9e6:	80 93 a6 00 	sts	0x00A6, r24
 9ea:	ce cc       	rjmp	.-1636   	; 0x388 <main+0x7e>
		case ResetACmin :		
			ACmin	= BaseLine;
			break;
			
		case IncSysTrial :
			move_to (2,1);
 9ec:	82 e0       	ldi	r24, 0x02	; 2
 9ee:	61 e0       	ldi	r22, 0x01	; 1
 9f0:	0e 94 29 01 	call	0x252	; 0x252 <move_to>
			display_char('S');
 9f4:	83 e5       	ldi	r24, 0x53	; 83
 9f6:	0e 94 b1 00 	call	0x162	; 0x162 <display_char>
			SysTrial ++;
 9fa:	80 91 a7 00 	lds	r24, 0x00A7
 9fe:	8f 5f       	subi	r24, 0xFF	; 255
 a00:	80 93 a7 00 	sts	0x00A7, r24
 a04:	c1 cc       	rjmp	.-1662   	; 0x388 <main+0x7e>
		case NextSysTrial :
			ACmin	= BaseLine;
			break;

		case SysStoreAndResetACmin :	
			SysPrData	= adc_read_dc ();
 a06:	0e 94 40 01 	call	0x280	; 0x280 <adc_read_dc>
 a0a:	80 93 a8 00 	sts	0x00A8, r24
 a0e:	3d c0       	rjmp	.+122    	; 0xa8a <__stack+0x62b>
			ACmin		= BaseLine;
			break;
				
		case IncMeanTrial :
			move_to (2,1);
 a10:	82 e0       	ldi	r24, 0x02	; 2
 a12:	61 e0       	ldi	r22, 0x01	; 1
 a14:	0e 94 29 01 	call	0x252	; 0x252 <move_to>
			display_char('M');
 a18:	8d e4       	ldi	r24, 0x4D	; 77
 a1a:	0e 94 b1 00 	call	0x162	; 0x162 <display_char>
			MeanTrial ++;
 a1e:	80 91 a9 00 	lds	r24, 0x00A9
 a22:	8f 5f       	subi	r24, 0xFF	; 255
 a24:	80 93 a9 00 	sts	0x00A9, r24
 a28:	af cc       	rjmp	.-1698   	; 0x388 <main+0x7e>
		case NextMeanTrial :
			ACmin	= BaseLine;
			break;

		case MeanStoreAndResetACmin :	
			MeanPrData	= adc_read_dc ();
 a2a:	0e 94 40 01 	call	0x280	; 0x280 <adc_read_dc>
 a2e:	80 93 aa 00 	sts	0x00AA, r24
 a32:	2b c0       	rjmp	.+86     	; 0xa8a <__stack+0x62b>
			ACmin		= BaseLine;
			break;

		case WaitAndIncHRtrialData :
			move_to (2,1);
 a34:	82 e0       	ldi	r24, 0x02	; 2
 a36:	61 e0       	ldi	r22, 0x01	; 1
 a38:	0e 94 29 01 	call	0x252	; 0x252 <move_to>
			display_char('H');
 a3c:	88 e4       	ldi	r24, 0x48	; 72
 a3e:	0e 94 b1 00 	call	0x162	; 0x162 <display_char>
			display_byte (HRtrial);
 a42:	80 91 ab 00 	lds	r24, 0x00AB
 a46:	0e 94 bc 00 	call	0x178	; 0x178 <display_byte>
 a4a:	84 ec       	ldi	r24, 0xC4	; 196
 a4c:	99 e0       	ldi	r25, 0x09	; 9
 a4e:	01 97       	sbiw	r24, 0x01	; 1
 a50:	f1 f7       	brne	.-4      	; 0xa4e <__stack+0x5ef>
			_delay_ms (10);
			HRtrialData [HRtrial]++;
 a52:	e0 91 ab 00 	lds	r30, 0x00AB
 a56:	f0 e0       	ldi	r31, 0x00	; 0
 a58:	e4 55       	subi	r30, 0x54	; 84
 a5a:	ff 4f       	sbci	r31, 0xFF	; 255
 a5c:	80 81       	ld	r24, Z
 a5e:	8f 5f       	subi	r24, 0xFF	; 255
 a60:	80 83       	st	Z, r24
 a62:	92 cc       	rjmp	.-1756   	; 0x388 <main+0x7e>
			break;
		
		case IncHRtrial :
			HRtrial ++;
 a64:	80 91 ab 00 	lds	r24, 0x00AB
 a68:	8f 5f       	subi	r24, 0xFF	; 255
 a6a:	80 93 ab 00 	sts	0x00AB, r24
 a6e:	8c cc       	rjmp	.-1768   	; 0x388 <main+0x7e>
		
		case HRStore :
			break;
		
		case IncDiasTrial :
			move_to (2,1);
 a70:	82 e0       	ldi	r24, 0x02	; 2
 a72:	61 e0       	ldi	r22, 0x01	; 1
 a74:	0e 94 29 01 	call	0x252	; 0x252 <move_to>
			display_char('D');
 a78:	84 e4       	ldi	r24, 0x44	; 68
 a7a:	0e 94 b1 00 	call	0x162	; 0x162 <display_char>
			DiasTrial ++;
 a7e:	80 91 b1 00 	lds	r24, 0x00B1
 a82:	8f 5f       	subi	r24, 0xFF	; 255
 a84:	80 93 b1 00 	sts	0x00B1, r24
 a88:	7f cc       	rjmp	.-1794   	; 0x388 <main+0x7e>
			break;

		case NextDiasTrial :
			ACmin	= BaseLine;
 a8a:	c0 92 60 00 	sts	0x0060, r12
 a8e:	7c cc       	rjmp	.-1800   	; 0x388 <main+0x7e>
			break;
		
		case DiasStore :
			DiasPrData	= adc_read_dc ();
 a90:	0e 94 40 01 	call	0x280	; 0x280 <adc_read_dc>
 a94:	80 93 b2 00 	sts	0x00B2, r24
 a98:	77 cc       	rjmp	.-1810   	; 0x388 <main+0x7e>

00000a9a <__udivmodqi4>:
 a9a:	99 1b       	sub	r25, r25
 a9c:	79 e0       	ldi	r23, 0x09	; 9
 a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__udivmodqi4_ep>

00000aa0 <__udivmodqi4_loop>:
 aa0:	99 1f       	adc	r25, r25
 aa2:	96 17       	cp	r25, r22
 aa4:	08 f0       	brcs	.+2      	; 0xaa8 <__udivmodqi4_ep>
 aa6:	96 1b       	sub	r25, r22

00000aa8 <__udivmodqi4_ep>:
 aa8:	88 1f       	adc	r24, r24
 aaa:	7a 95       	dec	r23
 aac:	c9 f7       	brne	.-14     	; 0xaa0 <__udivmodqi4_loop>
 aae:	80 95       	com	r24
 ab0:	08 95       	ret

00000ab2 <__udivmodhi4>:
 ab2:	aa 1b       	sub	r26, r26
 ab4:	bb 1b       	sub	r27, r27
 ab6:	51 e1       	ldi	r21, 0x11	; 17
 ab8:	07 c0       	rjmp	.+14     	; 0xac8 <__udivmodhi4_ep>

00000aba <__udivmodhi4_loop>:
 aba:	aa 1f       	adc	r26, r26
 abc:	bb 1f       	adc	r27, r27
 abe:	a6 17       	cp	r26, r22
 ac0:	b7 07       	cpc	r27, r23
 ac2:	10 f0       	brcs	.+4      	; 0xac8 <__udivmodhi4_ep>
 ac4:	a6 1b       	sub	r26, r22
 ac6:	b7 0b       	sbc	r27, r23

00000ac8 <__udivmodhi4_ep>:
 ac8:	88 1f       	adc	r24, r24
 aca:	99 1f       	adc	r25, r25
 acc:	5a 95       	dec	r21
 ace:	a9 f7       	brne	.-22     	; 0xaba <__udivmodhi4_loop>
 ad0:	80 95       	com	r24
 ad2:	90 95       	com	r25
 ad4:	bc 01       	movw	r22, r24
 ad6:	cd 01       	movw	r24, r26
 ad8:	08 95       	ret

00000ada <__divmodhi4>:
 ada:	97 fb       	bst	r25, 7
 adc:	09 2e       	mov	r0, r25
 ade:	07 26       	eor	r0, r23
 ae0:	0a d0       	rcall	.+20     	; 0xaf6 <__divmodhi4_neg1>
 ae2:	77 fd       	sbrc	r23, 7
 ae4:	04 d0       	rcall	.+8      	; 0xaee <__divmodhi4_neg2>
 ae6:	e5 df       	rcall	.-54     	; 0xab2 <__udivmodhi4>
 ae8:	06 d0       	rcall	.+12     	; 0xaf6 <__divmodhi4_neg1>
 aea:	00 20       	and	r0, r0
 aec:	1a f4       	brpl	.+6      	; 0xaf4 <__divmodhi4_exit>

00000aee <__divmodhi4_neg2>:
 aee:	70 95       	com	r23
 af0:	61 95       	neg	r22
 af2:	7f 4f       	sbci	r23, 0xFF	; 255

00000af4 <__divmodhi4_exit>:
 af4:	08 95       	ret

00000af6 <__divmodhi4_neg1>:
 af6:	f6 f7       	brtc	.-4      	; 0xaf4 <__divmodhi4_exit>
 af8:	90 95       	com	r25
 afa:	81 95       	neg	r24
 afc:	9f 4f       	sbci	r25, 0xFF	; 255
 afe:	08 95       	ret

00000b00 <_exit>:
 b00:	f8 94       	cli

00000b02 <__stop_program>:
 b02:	ff cf       	rjmp	.-2      	; 0xb02 <__stop_program>
