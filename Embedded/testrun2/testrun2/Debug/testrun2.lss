
testrun2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001d6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001e  00800060  000001d6  0000024a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  00000268  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000090  00000000  00000000  00000934  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000020  00000000  00000000  000009c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 0000008e  00000000  00000000  000009e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000255  00000000  00000000  00000a72  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000013c  00000000  00000000  00000cc7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000414  00000000  00000000  00000e03  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000090  00000000  00000000  00001218  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000110  00000000  00000000  000012a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000f5  00000000  00000000  000013b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_pubtypes 0000002b  00000000  00000000  000014ad  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 ed       	ldi	r30, 0xD6	; 214
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ae 37       	cpi	r26, 0x7E	; 126
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 da 00 	call	0x1b4	; 0x1b4 <main>
  7a:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <LCD_putchar>:
char hstring[16] = "0123456789ABCDEF"; //used by LCD_puthex

void LCD_putchar(char data)
{
	//PortD is output
	DDRD = 0xFF;
  82:	9f ef       	ldi	r25, 0xFF	; 255
  84:	91 bb       	out	0x11, r25	; 17
	//put data on bus
	PORTD = data;
  86:	82 bb       	out	0x12, r24	; 18
	//RW low, E low
	PORTC &= ~((1<<LCD_RW)|(1<<LCD_E));
  88:	85 b3       	in	r24, 0x15	; 21
  8a:	89 7f       	andi	r24, 0xF9	; 249
  8c:	85 bb       	out	0x15, r24	; 21
	//RS high, strobe E
	PORTC |= ((1<<LCD_RS)|(1<<LCD_E));
  8e:	85 b3       	in	r24, 0x15	; 21
  90:	85 60       	ori	r24, 0x05	; 5
  92:	85 bb       	out	0x15, r24	; 21
	...
	asm volatile ("nop");
	asm volatile ("nop");
	asm volatile ("nop");
	asm volatile ("nop");
	//RS low again, E low (belongs to strobe)
	PORTC &= ~((1<<LCD_RS)|(1<<LCD_E));
  9c:	85 b3       	in	r24, 0x15	; 21
  9e:	8a 7f       	andi	r24, 0xFA	; 250
  a0:	85 bb       	out	0x15, r24	; 21
	//release bus
	DDRD = 0;
  a2:	11 ba       	out	0x11, r1	; 17
}
  a4:	08 95       	ret

000000a6 <LCD_getaddr>:
char LCD_getaddr(void)
{
	//make var for the return value
	char address;
	//PortD is input
	DDRD = 0;
  a6:	11 ba       	out	0x11, r1	; 17
	//RW high, strobe enable
	PORTC |= ((1<<LCD_RW)|(1<<LCD_E));
  a8:	85 b3       	in	r24, 0x15	; 21
  aa:	86 60       	ori	r24, 0x06	; 6
  ac:	85 bb       	out	0x15, r24	; 21
	asm volatile ("nop");
  ae:	00 00       	nop
	asm volatile ("nop");
  b0:	00 00       	nop
	//while E is high, get data from LCD
	address = PIND;
  b2:	80 b3       	in	r24, 0x10	; 16
	//reset RW to low, E low (for strobe)
	PORTC &= ~((1<<LCD_RW)|(1<<LCD_E));
  b4:	95 b3       	in	r25, 0x15	; 21
  b6:	99 7f       	andi	r25, 0xF9	; 249
  b8:	95 bb       	out	0x15, r25	; 21
	//return address and busy flag
	return address;
}
  ba:	08 95       	ret

000000bc <LCD_wait>:
//the busy flag is cleared.
void LCD_wait(void)
{
	//get address and busy flag
	//and loop until busy flag cleared
	while((LCD_getaddr() & 0x80) == 0x80);
  bc:	0e 94 53 00 	call	0xa6	; 0xa6 <LCD_getaddr>
  c0:	88 23       	and	r24, r24
  c2:	e4 f3       	brlt	.-8      	; 0xbc <LCD_wait>
}
  c4:	08 95       	ret

000000c6 <LCD_command>:

//LCD_command works EXACTLY like LCD_putchar, but takes RS low for accessing the command reg
//see LCD_putchar for details on the code
void LCD_command(char command)
{
	DDRD = 0xFF;
  c6:	9f ef       	ldi	r25, 0xFF	; 255
  c8:	91 bb       	out	0x11, r25	; 17
	PORTD = command;
  ca:	82 bb       	out	0x12, r24	; 18
	PORTC &= ~((1<<LCD_RS)|(1<<LCD_RW)|(1<<LCD_E));
  cc:	85 b3       	in	r24, 0x15	; 21
  ce:	88 7f       	andi	r24, 0xF8	; 248
  d0:	85 bb       	out	0x15, r24	; 21
	PORTC |= (1<<LCD_E);
  d2:	aa 9a       	sbi	0x15, 2	; 21
	...
	asm volatile ("nop");
	asm volatile ("nop");
	asm volatile ("nop");
	asm volatile ("nop");
	PORTC &= ~(1<<LCD_E);
  dc:	aa 98       	cbi	0x15, 2	; 21
	DDRD = 0;
  de:	11 ba       	out	0x11, r1	; 17
}
  e0:	08 95       	ret

000000e2 <LCD_init>:
8 bit mode, 5*7 font, 2 lines (also for 4 lines)
auto-inc cursor after write and read
cursor and didsplay on, cursor blinking.
*/
void LCD_init(void)
{
  e2:	cf 93       	push	r28
  e4:	df 93       	push	r29
	//setup the LCD control signals on PortC
	DDRC |= ((1<<LCD_RS)|(1<<LCD_RW)|(1<<LCD_E));
  e6:	84 b3       	in	r24, 0x14	; 20
  e8:	87 60       	ori	r24, 0x07	; 7
  ea:	84 bb       	out	0x14, r24	; 20
	PORTC = 0x00;
  ec:	15 ba       	out	0x15, r1	; 21
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  ee:	cf ef       	ldi	r28, 0xFF	; 255
  f0:	df ef       	ldi	r29, 0xFF	; 255
  f2:	ce 01       	movw	r24, r28
  f4:	01 97       	sbiw	r24, 0x01	; 1
  f6:	f1 f7       	brne	.-4      	; 0xf4 <LCD_init+0x12>
	//if called right after power-up, we'll have to wait a bit (fine-tune for faster execution)
	_delay_loop_2(0xFFFF);
	//tell the LCD that it's used in 8-bit mode 3 times, each with a delay inbetween.
	LCD_command(0x30);
  f8:	80 e3       	ldi	r24, 0x30	; 48
  fa:	0e 94 63 00 	call	0xc6	; 0xc6 <LCD_command>
  fe:	ce 01       	movw	r24, r28
 100:	01 97       	sbiw	r24, 0x01	; 1
 102:	f1 f7       	brne	.-4      	; 0x100 <LCD_init+0x1e>
	_delay_loop_2(0xFFFF);
	LCD_command(0x30);
 104:	80 e3       	ldi	r24, 0x30	; 48
 106:	0e 94 63 00 	call	0xc6	; 0xc6 <LCD_command>
 10a:	ce 01       	movw	r24, r28
 10c:	01 97       	sbiw	r24, 0x01	; 1
 10e:	f1 f7       	brne	.-4      	; 0x10c <LCD_init+0x2a>
	_delay_loop_2(0xFFFF);
	LCD_command(0x30);
 110:	80 e3       	ldi	r24, 0x30	; 48
 112:	0e 94 63 00 	call	0xc6	; 0xc6 <LCD_command>
 116:	21 97       	sbiw	r28, 0x01	; 1
 118:	f1 f7       	brne	.-4      	; 0x116 <LCD_init+0x34>
	_delay_loop_2(0xFFFF);
	//now: 8 bit interface, 5*7 font, 2 lines.
	LCD_command(0x38);
 11a:	88 e3       	ldi	r24, 0x38	; 56
 11c:	0e 94 63 00 	call	0xc6	; 0xc6 <LCD_command>
	//wait until command finished
	LCD_wait();
 120:	0e 94 5e 00 	call	0xbc	; 0xbc <LCD_wait>
	//display on, cursor on (blinking)
	LCD_command(0x0F);
 124:	8f e0       	ldi	r24, 0x0F	; 15
 126:	0e 94 63 00 	call	0xc6	; 0xc6 <LCD_command>
	LCD_wait();
 12a:	0e 94 5e 00 	call	0xbc	; 0xbc <LCD_wait>
	//now clear the display, cursor home
	LCD_command(0x01);
 12e:	81 e0       	ldi	r24, 0x01	; 1
 130:	0e 94 63 00 	call	0xc6	; 0xc6 <LCD_command>
	LCD_wait();
 134:	0e 94 5e 00 	call	0xbc	; 0xbc <LCD_wait>
	//cursor auto-inc
	LCD_command(0x06);
 138:	86 e0       	ldi	r24, 0x06	; 6
 13a:	0e 94 63 00 	call	0xc6	; 0xc6 <LCD_command>
}
 13e:	df 91       	pop	r29
 140:	cf 91       	pop	r28
 142:	08 95       	ret

00000144 <LCD_write>:

//now it's time for a simple function for showing strings on the LCD. It uses the low-level
//functions above. usage example: LCD_write("Hello World!");
void LCD_write(char* dstring)
{
 144:	cf 93       	push	r28
 146:	df 93       	push	r29
 148:	ec 01       	movw	r28, r24
	//is the character pointed at by dstring a zero? If not, write character to LCD
	while(*dstring)
 14a:	88 81       	ld	r24, Y
 14c:	88 23       	and	r24, r24
 14e:	41 f0       	breq	.+16     	; 0x160 <LCD_write+0x1c>
	{
		//if the LCD is bus, let it finish the current operation
		LCD_wait();
 150:	0e 94 5e 00 	call	0xbc	; 0xbc <LCD_wait>
		//the write the character from dstring to the LCD, then post-inc the dstring is pointing at.
		LCD_putchar(*dstring++);
 154:	89 91       	ld	r24, Y+
 156:	0e 94 41 00 	call	0x82	; 0x82 <LCD_putchar>
//now it's time for a simple function for showing strings on the LCD. It uses the low-level
//functions above. usage example: LCD_write("Hello World!");
void LCD_write(char* dstring)
{
	//is the character pointed at by dstring a zero? If not, write character to LCD
	while(*dstring)
 15a:	88 81       	ld	r24, Y
 15c:	88 23       	and	r24, r24
 15e:	c1 f7       	brne	.-16     	; 0x150 <LCD_write+0xc>
		//if the LCD is bus, let it finish the current operation
		LCD_wait();
		//the write the character from dstring to the LCD, then post-inc the dstring is pointing at.
		LCD_putchar(*dstring++);
	}
}
 160:	df 91       	pop	r29
 162:	cf 91       	pop	r28
 164:	08 95       	ret

00000166 <LCD_puthex>:

void LCD_puthex(const char data)
{
 166:	1f 93       	push	r17
 168:	cf 93       	push	r28
 16a:	df 93       	push	r29
 16c:	18 2f       	mov	r17, r24
	//wait for the LCD to be ready
	LCD_wait();
 16e:	0e 94 5e 00 	call	0xbc	; 0xbc <LCD_wait>
	//print '0'
	LCD_putchar('0');
 172:	80 e3       	ldi	r24, 0x30	; 48
 174:	0e 94 41 00 	call	0x82	; 0x82 <LCD_putchar>
	LCD_wait();
 178:	0e 94 5e 00 	call	0xbc	; 0xbc <LCD_wait>
	//print 'x'
	LCD_putchar('x');
 17c:	88 e7       	ldi	r24, 0x78	; 120
 17e:	0e 94 41 00 	call	0x82	; 0x82 <LCD_putchar>
	LCD_wait();
 182:	0e 94 5e 00 	call	0xbc	; 0xbc <LCD_wait>
	//print high nibble as hex
	LCD_putchar(hstring[data>>4]);
 186:	81 2f       	mov	r24, r17
 188:	82 95       	swap	r24
 18a:	8f 70       	andi	r24, 0x0F	; 15
 18c:	ce e6       	ldi	r28, 0x6E	; 110
 18e:	d0 e0       	ldi	r29, 0x00	; 0
 190:	fe 01       	movw	r30, r28
 192:	e8 0f       	add	r30, r24
 194:	f1 1d       	adc	r31, r1
 196:	80 81       	ld	r24, Z
 198:	0e 94 41 00 	call	0x82	; 0x82 <LCD_putchar>
	LCD_wait();
 19c:	0e 94 5e 00 	call	0xbc	; 0xbc <LCD_wait>
	//print low nibble as hex
	LCD_putchar(hstring[data & 0x0F]);
 1a0:	1f 70       	andi	r17, 0x0F	; 15
 1a2:	c1 0f       	add	r28, r17
 1a4:	d1 1d       	adc	r29, r1
 1a6:	88 81       	ld	r24, Y
 1a8:	0e 94 41 00 	call	0x82	; 0x82 <LCD_putchar>
}
 1ac:	df 91       	pop	r29
 1ae:	cf 91       	pop	r28
 1b0:	1f 91       	pop	r17
 1b2:	08 95       	ret

000001b4 <main>:

#include <avr/io.h>
#include "lcd.h"

int main(void)
{
 1b4:	cf 93       	push	r28
 1b6:	df 93       	push	r29
	DDRD = 0x0ff;
 1b8:	8f ef       	ldi	r24, 0xFF	; 255
 1ba:	81 bb       	out	0x11, r24	; 17
	DDRC = 0x0ff;	   
 1bc:	84 bb       	out	0x14, r24	; 20
	LCD_init();
 1be:	0e 94 71 00 	call	0xe2	; 0xe2 <LCD_init>
    LCD_wait();
 1c2:	0e 94 5e 00 	call	0xbc	; 0xbc <LCD_wait>
	while(1)
    {
       LCD_write("Testing wtf!!");
 1c6:	c0 e6       	ldi	r28, 0x60	; 96
 1c8:	d0 e0       	ldi	r29, 0x00	; 0
 1ca:	ce 01       	movw	r24, r28
 1cc:	0e 94 a2 00 	call	0x144	; 0x144 <LCD_write>
 1d0:	fc cf       	rjmp	.-8      	; 0x1ca <main+0x16>

000001d2 <_exit>:
 1d2:	f8 94       	cli

000001d4 <__stop_program>:
 1d4:	ff cf       	rjmp	.-2      	; 0x1d4 <__stop_program>
