
Motor_Valve_Driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000011a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  0000016e  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 00000067  00000000  00000000  0000018e  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   0000027d  00000000  00000000  000001f5  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 0000012e  00000000  00000000  00000472  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000289  00000000  00000000  000005a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000060  00000000  00000000  0000082c  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000100  00000000  00000000  0000088c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000000e0  00000000  00000000  0000098c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000048  00000000  00000000  00000a6c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 62 00 	call	0xc4	; 0xc4 <main>
  64:	0c 94 8b 00 	jmp	0x116	; 0x116 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <Initializing_Port_Timer>:
#include <avr/io.h>
#include <util/delay.h>

void Initializing_Port_Timer(void)
{
	DDRB |= _BV(PB2) | _BV(PB3);
  6c:	87 b3       	in	r24, 0x17	; 23
  6e:	8c 60       	ori	r24, 0x0C	; 12
  70:	87 bb       	out	0x17, r24	; 23
	TCCR0 = _BV(WGM01);
  72:	88 e0       	ldi	r24, 0x08	; 8
  74:	83 bf       	out	0x33, r24	; 51
	TCNT0 = 0;
  76:	12 be       	out	0x32, r1	; 50
	OCR0 = 0;
  78:	1c be       	out	0x3c, r1	; 60
}
  7a:	08 95       	ret

0000007c <InflateCuff>:
#include <avr/io.h>
#include <util/delay.h>

void Initializing_Port_Timer(void)
{
	DDRB |= _BV(PB2) | _BV(PB3);
  7c:	87 b3       	in	r24, 0x17	; 23
  7e:	8c 60       	ori	r24, 0x0C	; 12
  80:	87 bb       	out	0x17, r24	; 23
	TCCR0 = _BV(WGM01);
  82:	88 e0       	ldi	r24, 0x08	; 8
  84:	83 bf       	out	0x33, r24	; 51
	TCNT0 = 0;
  86:	12 be       	out	0x32, r1	; 50
	OCR0 = 0;
  88:	1c be       	out	0x3c, r1	; 60
}

void InflateCuff(void)
{
	Initializing_Port_Timer();
	PORTB |= _BV(PB2) | _BV(PB3); 
  8a:	88 b3       	in	r24, 0x18	; 24
  8c:	8c 60       	ori	r24, 0x0C	; 12
  8e:	88 bb       	out	0x18, r24	; 24
}
  90:	08 95       	ret

00000092 <DeflateFast>:
#include <avr/io.h>
#include <util/delay.h>

void Initializing_Port_Timer(void)
{
	DDRB |= _BV(PB2) | _BV(PB3);
  92:	87 b3       	in	r24, 0x17	; 23
  94:	8c 60       	ori	r24, 0x0C	; 12
  96:	87 bb       	out	0x17, r24	; 23
	TCCR0 = _BV(WGM01);
  98:	88 e0       	ldi	r24, 0x08	; 8
  9a:	83 bf       	out	0x33, r24	; 51
	TCNT0 = 0;
  9c:	12 be       	out	0x32, r1	; 50
	OCR0 = 0;
  9e:	1c be       	out	0x3c, r1	; 60
}

void DeflateFast(void)
{
	Initializing_Port_Timer();
	PORTB &= (~(_BV(PB2) | _BV(PB3)));
  a0:	88 b3       	in	r24, 0x18	; 24
  a2:	83 7f       	andi	r24, 0xF3	; 243
  a4:	88 bb       	out	0x18, r24	; 24
}
  a6:	08 95       	ret

000000a8 <DeflateSlow>:
#include <avr/io.h>
#include <util/delay.h>

void Initializing_Port_Timer(void)
{
	DDRB |= _BV(PB2) | _BV(PB3);
  a8:	87 b3       	in	r24, 0x17	; 23
  aa:	8c 60       	ori	r24, 0x0C	; 12
  ac:	87 bb       	out	0x17, r24	; 23
	TCCR0 = _BV(WGM01);
  ae:	88 e0       	ldi	r24, 0x08	; 8
  b0:	83 bf       	out	0x33, r24	; 51
	TCNT0 = 0;
  b2:	12 be       	out	0x32, r1	; 50
	OCR0 = 0;
  b4:	1c be       	out	0x3c, r1	; 60
}

void DeflateSlow(void)
{
	Initializing_Port_Timer();
	PORTB &= (~(_BV(PB2)));
  b6:	c2 98       	cbi	0x18, 2	; 24
	OCR0 = 255;
  b8:	8f ef       	ldi	r24, 0xFF	; 255
  ba:	8c bf       	out	0x3c, r24	; 60
	TCCR0 |= _BV(CS00) | _BV(COM00);
  bc:	83 b7       	in	r24, 0x33	; 51
  be:	81 61       	ori	r24, 0x11	; 17
  c0:	83 bf       	out	0x33, r24	; 51
}
  c2:	08 95       	ret

000000c4 <main>:

int main(void)
{
  c4:	cf 93       	push	r28
  c6:	df 93       	push	r29
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  c8:	c9 e1       	ldi	r28, 0x19	; 25
  ca:	d0 e0       	ldi	r29, 0x00	; 0
    while(1)
	{   
		InflateCuff();
  cc:	0e 94 3e 00 	call	0x7c	; 0x7c <InflateCuff>
  d0:	80 e5       	ldi	r24, 0x50	; 80
  d2:	93 ec       	ldi	r25, 0xC3	; 195
  d4:	fe 01       	movw	r30, r28
  d6:	31 97       	sbiw	r30, 0x01	; 1
  d8:	f1 f7       	brne	.-4      	; 0xd6 <main+0x12>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  da:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  dc:	d9 f7       	brne	.-10     	; 0xd4 <main+0x10>
		_delay_ms(5000);
		DeflateFast();
  de:	0e 94 49 00 	call	0x92	; 0x92 <DeflateFast>
  e2:	80 e5       	ldi	r24, 0x50	; 80
  e4:	93 ec       	ldi	r25, 0xC3	; 195
  e6:	fe 01       	movw	r30, r28
  e8:	31 97       	sbiw	r30, 0x01	; 1
  ea:	f1 f7       	brne	.-4      	; 0xe8 <main+0x24>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  ec:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  ee:	d9 f7       	brne	.-10     	; 0xe6 <main+0x22>
		_delay_ms(5000);
		InflateCuff();
  f0:	0e 94 3e 00 	call	0x7c	; 0x7c <InflateCuff>
  f4:	80 e5       	ldi	r24, 0x50	; 80
  f6:	93 ec       	ldi	r25, 0xC3	; 195
  f8:	fe 01       	movw	r30, r28
  fa:	31 97       	sbiw	r30, 0x01	; 1
  fc:	f1 f7       	brne	.-4      	; 0xfa <main+0x36>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  fe:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 100:	d9 f7       	brne	.-10     	; 0xf8 <main+0x34>
		_delay_ms(5000);
		DeflateSlow();
 102:	0e 94 54 00 	call	0xa8	; 0xa8 <DeflateSlow>
 106:	80 e5       	ldi	r24, 0x50	; 80
 108:	93 ec       	ldi	r25, 0xC3	; 195
 10a:	fe 01       	movw	r30, r28
 10c:	31 97       	sbiw	r30, 0x01	; 1
 10e:	f1 f7       	brne	.-4      	; 0x10c <main+0x48>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 110:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 112:	d9 f7       	brne	.-10     	; 0x10a <main+0x46>
 114:	db cf       	rjmp	.-74     	; 0xcc <main+0x8>

00000116 <_exit>:
 116:	f8 94       	cli

00000118 <__stop_program>:
 118:	ff cf       	rjmp	.-2      	; 0x118 <__stop_program>
